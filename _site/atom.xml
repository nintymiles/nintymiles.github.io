<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>九十里</title>
 <link href="http://nintymiles.github.io/atom.xml" rel="self"/>
 <link href="http://nintymiles.github.io/"/>
 <updated>2016-06-13T15:30:45+08:00</updated>
 <id>http://nintymiles.github.io</id>
 <author>
   <name>SeanRen</name>
   <email>nintymiles@icloud.com</email>
 </author>

 
 <entry>
   <title>Learning Notes</title>
   <link href="http://nintymiles.github.io/2016/06/13/learning-notes/"/>
   <updated>2016-06-13T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/13/learning-notes</id>
   <content type="html">&lt;h2 id=&quot;swifthow-curly-brackets-and-parentheses-are-used-in-swift&quot;&gt;Swift中大括号和括号的用法（how curly brackets and parentheses are used in Swift）&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;In Swift, unlike other C-like languages, curly brackets are &lt;strong&gt;&lt;em&gt;required&lt;/em&gt;&lt;/strong&gt; for &lt;em&gt;conditional statements&lt;/em&gt; and &lt;em&gt;loops&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Unlike other C-like languages, the parentheses &lt;strong&gt;around&lt;/strong&gt; &lt;em&gt;conditional expressions&lt;/em&gt; in Swift are &lt;strong&gt;&lt;em&gt;optional&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;repeat-while&quot;&gt;Repeat-While&lt;/h2&gt;
&lt;p&gt;The difference between the while and repeat-while loops is that the while loops check the conditional statement prior to executing the block of code the  rst time; therefore, all the variables in the conditional statements need to be initialized prior to executing the while loop. The repeat-while loop will run through the loop block prior to checking the conditional statement for the  rst time; this means that we can initialize the variables in the conditional block of code. Use of the repeat-while loop is preferred when the conditional statement is dependent on the code in the loop block. The repeat-while loop takes the following format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//syntax
repeat {
      block of code
   } while condition
   
//example
var ran: Int
   repeat {
       ran = Int(arc4random() % 5)
   } while ran &amp;lt; 4
   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;switch-statement&quot;&gt;Switch Statement&lt;/h2&gt;
&lt;p&gt;The switch statement takes a value and then compares it to the several possible matches, and executes the appropriate block of code based on the  rst successful match. The switch statement is an alternative to using the if-else statement when there could be several possible matches. The switch statement takes the following format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;switch value {
     case match1 :
       block of code
     case match2 :
       block of code
     ...... as many cases as needed
     default :
       block of code
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Unlike&lt;/em&gt;&lt;/strong&gt; the switch statements in most other languages, in Swift, it &lt;strong&gt;does not fall through to the next case statement&lt;/strong&gt;; therefore, we &lt;strong&gt;do not need&lt;/strong&gt; to use a &lt;strong&gt;break&lt;/strong&gt; statement to prevent the fall through. This is** another safety feature that is built into Swift** since one of the most common programming mistakes, with the switch statement, made by beginner programmers is to forget the break statement at the end of the case statement.&lt;/p&gt;

&lt;p&gt;It is possible to include multiple items in a single case. To set multiple items within a single case, we would need to separate the items with a comma. Let’s look at how we would use the switch statement to tell us if a character was a vowel or a consonant:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var char : Character = &quot;e&quot;
   switch char {
   case &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;:
       print(&quot;letter is a vowel&quot;)
   case &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;,
   &quot;n&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;:
       print(&quot;letter is a consonant&quot;)
   default:
       print(&quot;unknown letter&quot;)
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is also possible to check the value of a switch statement to see whether it is included in a &lt;strong&gt;&lt;em&gt;range&lt;/em&gt;&lt;/strong&gt;. To do this, we would use a range operator in the case statement, as shown in the following example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var grade = 93
   switch grade {
   case 90...100:
       print(&quot;Grade is an A&quot;)
   case 80...89:
       print(&quot;Grade is a B&quot;)
   case 70...79:
       print(&quot;Grade is an C&quot;)
   case 60...69:
 print(&quot;Grade is a D&quot;)
[ 94 ]
  
case 0...59:
    print(&quot;Grade is a F&quot;)
default:
    print(&quot;Unknown Grade&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In Swift, any case statement can contain** an optional guard condition** that can provide an additional condition to validate. The guard condition is defined with the &lt;strong&gt;where&lt;/strong&gt; keyword. Let’s say, in our preceding example, we had students who were receiving special assistance in the class and we wanted to de ne a grade of D for them in the range of 55 to 69. The following example shows how to do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var studentId = 4
   var grade = 57
   switch grade {
   case 90...100:
       print(&quot;Grade is an A&quot;)
   case 80...89:
       print(&quot;Grade is a B&quot;)
   case 70...79:
       print(&quot;Grade is an C&quot;)
   case 55...69 where studentId == 4:
       print(&quot;Grade is a D for student 4&quot;)
   case 60...69:
       print(&quot;Grade is a D&quot;)
   case 0...59:
       print(&quot;Grade is a F&quot;)
   default:
       print(&quot;Unknown Grade&quot;)
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;One thing to keep in mind with the guard expression is that Swift will attempt to match the value starting with the  rst case statement and working its way down checking each case statement in order. This means that if we put the case statement with the guard expression after the Grade F case statement, then the case statement with the guard expression would &lt;strong&gt;never be reached&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every switch statement must have a match for all the possible values. This means that unless we are matching against an enum, each switch statement must have a &lt;strong&gt;default&lt;/strong&gt; case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Switch statements are also &lt;strong&gt;extremely useful&lt;/strong&gt; for evaluating &lt;strong&gt;enumerations&lt;/strong&gt;. Since an enumeration has a  nite number of values, if we provide a case statement for all the values in the enumeration, we do not need to provide a default case. The following example shows how we can use a switch statement to evaluate an enumeration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Product {
       case Book(String, Double, Int)
       case Puzzle(String, Double)
   }
   var order = Product.Book(&quot;Mastering Swift 2&quot;, 49.99, 2015)
   switch order {
   case .Book(let name, let price, let year):
       print(&quot;You ordered the book \(name) for \(price)&quot;)
   case .Puzzle(let name, let price):
       print(&quot;You ordered the Puzzle \(name) for \(price)&quot;)
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Notes</title>
   <link href="http://nintymiles.github.io/2016/06/10/learning-notes/"/>
   <updated>2016-06-10T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/10/learning-notes</id>
   <content type="html">&lt;h2 id=&quot;uibezierpath&quot;&gt;UIBezierPath&lt;/h2&gt;
&lt;p&gt;The UIBezierPath class lets you define a path consisting of &lt;strong&gt;straight&lt;/strong&gt; and &lt;strong&gt;curved line&lt;/strong&gt; &lt;em&gt;segments&lt;/em&gt; and &lt;strong&gt;render that path in your custom views&lt;/strong&gt;. You use this class initially to specify just the geometry for your path. Paths can define simple shapes such as rectangles, ovals, and arcs or they can define complex polygons that incorporate a mixture of straight and curved line segments. After defining the shape, you can use additional methods of this class to render the path in the current drawing context.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;UIBezierPath定义包含直线和曲线片段的路径，然后可以在定制的view中渲染这个路径。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;两个单词&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;interpolate:插入 
  &amp;gt; to interpolate a remark 插一句话&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Catmull-Rom:Catmull-Rom插值
  &amp;gt; Little did Catmull and Parke realise that their technology would become the foundation for all special effects in huge Hollywood movies and countless video games.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Hermite:艾米插值&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;popmmtweenanimation&quot;&gt;Pop扩展开源项目&lt;em&gt;MMTweenAnimation&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;MMTweenAnimation实际实现为数学曲线公式动画，非简单路径叠加，挺有意思。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Tokyo Tourist Guide Notes</title>
   <link href="http://nintymiles.github.io/2016/06/09/tourist-guide-notes/"/>
   <updated>2016-06-09T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/09/tourist-guide-notes</id>
   <content type="html">&lt;h2 id=&quot;tokyo-tourist-guide&quot;&gt;Tokyo Tourist Guide&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;机票相关&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;行李超重可能&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;行程收集&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;经典线路&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;D1 皇居 →银座 →东京塔 →六本木
    集中东京千代田区及周边游览，上午参观皇居，下午逛银座附近，东京塔与六本木之丘可选择其一作为夜景观赏地，更推荐能看到东京塔全景的六本木之丘展望台。
    
    D2 上野公园(2小时) → 秋叶原(2小时) → 浅草寺(2小时) → 东京天空树(2小时)
    上午游玩上野公园，下午逛逛秋叶原后前往浅草寺，若前一天未能登高观赏东京的夜景，晴空塔也是个不错的选择，但需要注意控制好每个景点的游玩时间。若当日有购物需求也可将秋叶原安排在行程最后。
    上野公园周边美食选择极多，从物美价廉的街巷美食到赫赫有名的人气料理，均能一饱口福，浅草寺与秋叶原周边也有许多平民美食    
上野公园周边美食
 
    盖饭
吉野家日本牛肉饭专门店(上野站前店)
位置：JR上野站下站后步行约160m，从上野公园步行过来约7分钟
价格：人均40RMB
百年名店，性价比极高，蚂蜂窝人气美食
    鳗鱼饭
伊豆荣本店
位置：从JR上野站步行5分钟
价格：人均100-150RMB
tabelog推荐，历史悠久的鳗鱼名店
    串烧
鸟椿
位置：距离上野公园700m左右，从上野动物园出来步行100m左右即到
价格：人均80RMB
《孤独的美食家》力推，物美价廉的烧鸟屋
秋叶原周边美食
    海鲜
矶丸水产(秋叶原店)
位置：秋叶原附近200处
价格：午餐：50RMB-100RMB；晚餐：150RMB-200RMB
东京非常知名的海鲜烧烤店，美食达人力荐
    拉面
博多风龙(秋叶原店)
位置：距离秋叶原400m左右
价格：人均50RMB
人气连锁拉面，蚂蜂窝与大众点评榜单美食
    涮锅
但马屋
位置：位于秋叶原友都八喜8F
价格：人均100RMB
tabelog上榜美食
浅草寺周边美食
    天妇罗
大黑家
位置：位于仲见世通的街道上，穿过雷门沿着仲见世通步行7分钟左右
价格：人均150RMB
蚂蜂窝人气美食，大众点评东京top5美食
甜点
    浅草花月堂
位置：浅草寺景区中有四个分店，分别为雷门店，仲见世通店，本店，旧本店，直接步行即可到达
价格：人均70RMB
《孤独的美食家》力推美食，各大网友推荐
    怀石料理
浅草今半
位置：从浅草寺出来约400m左右
价格：午餐：150RMB-200RMB；晚餐： 500RMB-750RMB
百年老字号店铺，浅草知名餐厅

    D3 东京迪士尼乐园(8小时) → 东京迪士尼海洋(8小时)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;镰仓&lt;/p&gt;

    &lt;p&gt;镰仓在1185-1333年期间曾经是日本第一座封建王朝的首都。最早由源氏家族的赖朝以这里为中心统治日本，赖朝死后由于后继无人，他妻子的家族北条继续了统治，直至1333年，由于抵抗来自中国元朝忽必烈的进攻消耗国力，被醍醐天皇击败，日本的首都才移往京都（Kyoto）。&lt;/p&gt;

    &lt;p&gt;打开镰仓的地图，建长寺、圆觉寺、鹤冈八幡宫、报国寺、大佛，这些有数百年历史的寺庙无疑是这里最值得花时间的地方。日本有一个很意思的现象，那就是标准化程度特别高，如果在镰仓看过了这些寺庙，个人觉得日本其它的寺庙也许就可以少花些时间了，因为寺庙建筑的建制都非常相似，不同的大概就是历史事件和一些供奉的不同了。&lt;/p&gt;

    &lt;p&gt;参考游记 &lt;a href=&quot;http://www.mafengwo.cn/i/3544985.html&quot;&gt;镰仓(Kamakura)-一座适合漫步和冥想的千年古城&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;预购物品&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;富士xt10
  日元98,270 ＝ ¥6000&lt;/li&gt;
  &lt;li&gt;海神T2600
  日元70,000 = 4000&lt;/li&gt;
  &lt;li&gt;海神S3000
  日元112,000 = 6500+&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;航班信息&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;日航是提前72小时开始网上值机, 往返机票可以一起值.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-4&quot;&gt;日常生活是想&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;充电的话，日本都是两口，国内两口的插头都可以用&lt;/li&gt;
  &lt;li&gt;日本的电子产品配件会很便宜···结果···比北京贵三倍以上！！一张存储卡好几百！！国内几十块的东西···不知为啥会这样？&lt;/li&gt;
  &lt;li&gt;衣服的话，我是夏末秋初，日本关东关西的温度要比北京高，据说&lt;strong&gt;常年和上海同期温度&lt;/strong&gt;相当，国庆节时段短袖再带个薄外套就够啦，阴天下雨穿一下。袜子一定多带，带好看一点，因为好多场合要脱鞋的呦~~&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;机场去市区的交通选择&lt;/h3&gt;
&lt;p&gt;通常来说，如果你不是住在利木津巴士沿途酒店，不太推荐巴士，一个是贵还有一个是慢。如果你是飞羽田，最常规方式就是乘坐“京急电铁”到最合适的沿途站点（例如品川？人形町？浅草？）然后换乘市区交通去目的地；如果你是飞成田，最常规方式则是T2那边服务台购买“京成电铁”或者“NE’X”的票前往市区，乘坐京成的SKYLINER最多，因为快，价格也不贵，两千多日元，还有和&lt;strong&gt;TOKYO SUBWAY TICKET&lt;/strong&gt;的套票可购买，关于京成的具体信息你可以看我篇头附注的链接。&lt;/p&gt;

&lt;p&gt;东京的交通实在繁杂，包括JR、都营地铁、METRO地铁、小田急、百合鸥、京急电铁、东武铁道、西武铁道、京王铁道、东京急行电铁、京滨急行电铁、临海线等等，加上各路BUS，可谓交通线路密密麻麻，在换乘不同公司的铁道线路的时候，还必须出站重新买票，比较麻烦。
为了节省麻烦，可购买Suica卡或者Passnet卡。&lt;/p&gt;

&lt;p&gt;Suica是由日本铁道公司JR推出的储值卡，类似上海北京的交通卡，JR车站的自动售票机有售。车站都有精算机，可查询余额以及充值。该卡不仅可以乘坐各类交通工具，在有其企鹅图案的地方都可以用其消费，例如便利店、自动售卖机等。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;东京交通券的选择&lt;/h3&gt;
&lt;p&gt;如果你只是玩东京，不要考虑JR PASS了，很多人问要不要买全国版JR PASS七日券，这玩意你需要长距离新干线坐个两三次才值得的，例如你东京大阪往返两次以上，那么就是划算，只是东京市区游玩，不需要。若是你住在JR沿线而不是地铁站附近，那么考虑一下JR一日券也是可以的，七百多日元，一天去个两三个地方基本也是划算的，但是正常情况来说，买TOKYO SUBWAY TICKET的人最多，一日券800日元，两日1200日元，三日1500日元，羽田机场、成田机场、市区BIC CAMERA、部分酒店都可以购买，例如我这次入住的半藏门蒙特利酒店前台就可以购买。地铁单程最便宜也要170日元，平均每天坐个几次地铁的话，买这TST券就非常合适，如果你摸不清爽到底要不要买，可以提前YAHOO JAPAN换乘案内上计算一下自己每天的地铁交通费用。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;住宿酒店附近的台场&lt;/h3&gt;
&lt;p&gt;台场的景点还是蛮多的，一般我推荐的话，都建议在这边玩上一整天，像海滨公园、富士电视台、丰田体验馆、一丁目商店街、购物商城、摩天轮、彩虹桥、未来科学馆什么的都在这边，还有个可以不用住宿即可泡汤的”大江户温泉物语“，另外，这边晚上夜景也相当不错，可以买个百合海鸥号一日券玩上一整天，那个有个报时的挺出名的大钟也可以去一下，就在汐留站那边。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;吃&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;今半
  他们家的肉食是很出名的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;disney&quot;&gt;Disney乐园介绍及路线&lt;/h3&gt;
&lt;p&gt;迪士尼乐园按照经典的迪士尼主题公园结构设计，主要分为世界市集、探险乐园、西部乐园、新生物区、梦幻乐园、卡通城及未来乐园等7个区，园内的舞台及广场上定时会有丰富多彩的化妆表演和趣味游行活动，比较童话梦幻，项目相对来说比较温和，适合全家出游。如果第一次去迪士尼游玩的话，还是推荐来东京迪士尼乐园，可以了解到原汁原味的迪士尼风格。&lt;/p&gt;

&lt;p&gt;电话(81-45)3305201&lt;/p&gt;

&lt;p&gt;网址http://www.tokyodisneyresort.jp/tc/index.html&lt;/p&gt;

&lt;p&gt;交通 － 搭乘JR京叶线、武藏野线至舞滨站。也可以从东京站八重洲的公交1号站台，直接搭乘专线巴士到达&lt;/p&gt;

&lt;p&gt;门票 － 1日票6400日元/人，学生5500日元/人，儿童4200日元/人，老人5500日元/人，可以购买家庭套票及多日票&lt;/p&gt;

&lt;p&gt;开放时间 － 每日具体开放时间和表演活动详见官网&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;语言&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;首先说一些东京常用的地名：
新宿——XIN JIUKU(新~究哭）
原宿——HALA JIUKU(哈啦~究哭）
池袋——YI KEI BU KU LU(一KEI步哭路）
银座——GING ZA(GING砸）
上野——WU EI NUO(五诶糯）
中野——NA KA NUO(那卡糯）
浅草——A SA KU SA(阿萨哭撒）
东京——TUO KUO(托~哭哟）
大阪——O O SAKA(哦哦萨卡）
京都——KUO DUO(库哟~多）
横滨——YO KUO HA MA（哟阔哈嘛）
富士山——FU JI SANG或者FU JI MANGTEN(富几桑，富几mountain）
东京迪斯尼——TUO KUO DEI SI NI RUI SUO TE（托~哭哟 嘚丝尼瑞所特）
赤坂见附——A KA SA KA MI CI KEI(阿卡撒卡米次KEI）
涩谷——XI BU YA（西不雅）
后乐园——KUO LA KU EN(阔拉哭EN）
中目黑——NA KA MEI GU LU（那卡妹咕噜）
筑地——CI KI JI（次KI 几）
惠比寿——EI BI SI（诶币丝）
代官山——DAI KANG YAMA(带 康 呀嘛）
六本木——LO BONG GI(咯 BONG GI）
自由之丘——JIU GA O KA(久 嘎 欧卡）
秋叶原——A KI HABALA(阿 KI 哈巴拉）
饭田桥——YI YI TA BAXI(以一它八喜）
表参道——O MO TEI SANG DO(哦摸TEI桑多）
吉祥寺——KI QI JUO JI（KI奇JUO几）
下北泽——XI MO KI TA ZAWA(洗摸KI 它砸瓦）
台场——DAI YI BA(戴吧）
成田机场——NA LI TA KUKUO（那丽塔 哭阔）
羽田机场——HA NEI DA KUKUO（哈内搭 哭阔）
厕所(三种说法）——TUO YI LEI（拖一累）
KEI XUO XICI（中文写作化妆室，KEI XUO 席次）
O TEI A LA YI（中文写作手洗，哦TEI阿拉依）
升降电梯——EI LEI BEI TA(哎累贝塔）
手扶电梯——EI SI KA LEI TA(艾斯卡雷塔）
出入口——DEI YI LI GUQI(嘚一 里 古琦）
储物柜——KO YIN LO KA(coinlocker)
 
常用对话：
日本是个非常讲礼貌的国家
你经常在路上会听到人说“斯密马森”“阿里嘎多”“过妹那赛义”“空尼奇瓦”这几句，这也是最常用的。
当你要问别人什么问题、饭店里招呼服务员过来、地铁里让别人让下路什么的，都可以说SI MI MA SEN(私密马森），基本就是“不好意思、打扰一下、请让一让之类的意思）
对别人的帮助表示感谢的时候可以说A LI GADUO GUOZAYIMASI(阿里嘎多锅砸一马斯），也可以简单地说”阿里嘎多“，意思就是谢谢。
如果你不小心碰撞到了别人之类的，可以说GUO MEI NA SAIYI(过妹那赛义），意思就是不好意思对不起之类的。
你好：KONG NI QIWA(空尼七哇）。一般有幼儿园的小朋友成队走过的时候，他们都会很萌的这样和你问好哦。
如果要问路，可以说：斯密马森,(地点名）哇 多扩 德斯噶？——在这里，”多扩“就是哪里的意思，”德斯噶“是疑问后缀。
右边：MIGI（蜜GI）
左边：HI DALI(HI大里）
一直走：MA SIGU(嘛四顾）
如果在站台问电车：斯密马森，（地名）嘛嘚  囊邦森 得似噶？——”嘛嘚“放在地名后面，意思就是到哪里，”囊邦森“就是几号线的意思。
1：YIQI(一起）
2：NI(腻）
3：SANG(桑）
4：YONG（用）
5：GUO（过）
6：LOKU(漏酷）
7：XIQI或者NANA(习气，娜娜）
8：HAQI（哈气）
9：KIU
10：JIU(就）
百：HIA KU(HIA 酷）
千：SEN（森）
万：MANG（忙，第四声）
地铁：QI KA TEICI（起卡TEI次）
电车：DEN XIA(DEN下）
出租车：TA KU XI（它哭西）
大巴：BASI(BUS）
车站：EI KI(诶KI)
新干线：XIN KANG SEN(新康森）
JR:JIE ALU(姐~阿鲁）
日元：EN,500日元就是：GUO HIAKU EN
这个东西多少钱：KUO LEI WA YIKULA DEI SI GA?(阔累哇 一库拉 得斯噶？）YIKULA就是多少钱的意思，KUO LEI是“这个”的意思，WA就是“是”的意思
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当你在咨询日本人的时候，如果对方说了一通日语，后面加了”NAYI那一“的发音，基本就是表示否定，例如没有、不是等等，注意听一下。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Surfing Notes</title>
   <link href="http://nintymiles.github.io/2016/06/08/surfing-notes/"/>
   <updated>2016-06-08T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/08/surfing-notes</id>
   <content type="html">&lt;h2 id=&quot;linux---wikipedia&quot;&gt;Linux的发音及由来 - Wikipedia&lt;/h2&gt;
&lt;p&gt;Linux (pronounced /ˈlɪnəks/ lin-əks or, less frequently, /ˈlaɪnəks/ lyn-əks) is a Unix-like and mostly POSIX-compliant computer operating system (OS) assembled under the model of free and open-source software development and distribution. The defining component of Linux is the Linux kernel, an operating system kernel first released on 5 October 1991 by Linus Torvalds.The Free Software Foundation uses the name GNU/Linux to describe the operating system, which has led to some controversy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Notes</title>
   <link href="http://nintymiles.github.io/2016/06/08/learning_notes/"/>
   <updated>2016-06-08T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/08/learning_notes</id>
   <content type="html">&lt;h2 id=&quot;sublime-text-3&quot;&gt;如何禁用sublime text 3的升级检测功能？&lt;/h2&gt;
&lt;p&gt;使用Sublime Text 3时，每次打开会默认进行更新监测，若有更新则每次都会弹出更新提醒框，若不想更新检测则需要如下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;进入Preferences -&amp;gt; Settings-User（用户设置）&lt;/li&gt;
  &lt;li&gt;在JSON数据格式中（即curly braces（｛｝）所包括区域）添加一句Json格式配置：”update_check”:false&lt;/li&gt;
  &lt;li&gt;然后关闭且重启Submine Text 3即可&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;twitter&quot;&gt;Twitter的视频缓存印象&lt;/h2&gt;
&lt;p&gt;用twitter浏览一些新闻视频时，观察了一下twitrer的线程所打开的文件和端口。尤其看见了其视频缓存路径/Users/seanren/Library/Containers/com.twitter.twitter-mac/Data/Library/Caches/com.twitter.mac.videos/，当中的视频文件时根据列表中可见视频而进行预加载的。可以看到twitter并没有使用很花哨的手段。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mac快速锁屏及其它</title>
   <link href="http://nintymiles.github.io/2016/06/07/surfing-notes/"/>
   <updated>2016-06-07T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/07/surfing-notes</id>
   <content type="html">&lt;h2 id=&quot;mac&quot;&gt;Mac如何快捷锁屏的实现方式&lt;/h2&gt;
&lt;p&gt;Mac快速锁屏的设置步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在security&amp;amp;privacy-&amp;gt;general中启用‘required password immediately after sleep or screen save launched&lt;/li&gt;
  &lt;li&gt;使用command+option+power(eject)快捷键进入睡眠&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;注：ctrl＋shift＋power（eject）是休眠快捷键&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll-post&quot;&gt;Jekyll post如何使用草稿模式&lt;/h2&gt;
&lt;p&gt;草稿是没有日期的文章。它们是你还在创作中而暂时不想发表的文章。想要开始使用草稿，你需要在网站根目录下创建一个名为 _drafts 的文件夹（如在目录结构章节里描述的），并新建你的第一份草稿：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- _drafts/
|   |-- a-draft-post.md
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为了预览你拥有草稿的网站，运行 jekyll serve 或者带有 –drafts 配置选项的 jekyll build。此两种方法皆会将 Time.now 的值赋予草稿文章，作为其发布日期，所以你将看到草稿文章作为最新文章被生成。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning notes</title>
   <link href="http://nintymiles.github.io/2016/06/07/learning-notes/"/>
   <updated>2016-06-07T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/07/learning-notes</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;计数排序的理解&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;先找出数组中的最大元素，然后以最大元素值加1建立计数数组&lt;/li&gt;
  &lt;li&gt;将实际元素在计数数组作为索引值，并将此位置存储出现次数计数&lt;/li&gt;
  &lt;li&gt;把从头到尾的索引值的出现次数一次当前一个和后一个相加（从1开始），然后得到每个元素的其实际索引位置。最后在1:1的新数组中将是实际值赋值到实际索引位置。&lt;/li&gt;
  &lt;li&gt;因为实际计数每个数值的出现都计算在内，而数组索引从零开始，所以计算出的索引值实际使用时都要减1？&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;counting-sort&quot;&gt;Counting sort&lt;/h2&gt;
&lt;p&gt;To understand the algorithm let’s walk through a small example.&lt;/p&gt;

&lt;p&gt;Consider the array: &lt;code class=&quot;highlighter-rouge&quot;&gt;[ 10, 9, 8, 7, 1, 2, 7, 3 ]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-1&quot;&gt;Step 1:&lt;/h3&gt;

&lt;p&gt;The first step is to count the total number of occurrences for each item in the array. The output for the first step would be a new array that looks as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Index 0 1 2 3 4 5 6 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the code to accomplish this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maxElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maxElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;countArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;repeatedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;countArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-2&quot;&gt;Step 2:&lt;/h3&gt;

&lt;p&gt;In this step the algorithm tries to determine the number of elements that are placed before each element. Since, you already know the total occurrences for each element you can use this information to your advantage. The way it works is to sum up the previous counts and store them at each index.&lt;/p&gt;

&lt;p&gt;The count array would be as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Index 0 1 2 3 4 5 6 7 8 9 10
Count 0 1 2 3 3 3 3 5 6 7 8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The code for step 2 is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;countArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-3&quot;&gt;Step 3:&lt;/h3&gt;

&lt;p&gt;This is the last step in the algorithm. Each element in the original array is placed at the position defined by the output of step 2. For example, the number 10 would be placed at an index of 7 in the output array. Also, as you place the elements you need to reduce the count by 1 as those many elements are reduced from the array.&lt;/p&gt;

&lt;p&gt;The final output would be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Index  0 1 2 3 4 5 6 7
Output 1 2 3 7 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the code for this final step:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sortedArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;repeatedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;countArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sortedArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedArray&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;

&lt;p&gt;The algorithm uses simple loops to sort a collection. Hence, the time to run the entire algorithm is &lt;strong&gt;O(n+k)&lt;/strong&gt; where &lt;strong&gt;O(n)&lt;/strong&gt; represents the loops that are required to initialize the output arrays and &lt;strong&gt;O(k)&lt;/strong&gt; is the loop required to create the count array.&lt;/p&gt;

&lt;p&gt;The algorithm uses arrays of length &lt;strong&gt;n + 1&lt;/strong&gt; and &lt;strong&gt;n&lt;/strong&gt;, so the total space required is &lt;strong&gt;O(2n)&lt;/strong&gt;. Hence for collections where the keys are scattered in a dense area along the number line it can be space efficient.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reading notes</title>
   <link href="http://nintymiles.github.io/2016/06/04/reading-notes/"/>
   <updated>2016-06-04T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/04/reading-notes</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;房间里的大象 - 刘瑜&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;沉默可能来源于善意，也可能来源于怯懦，沉默也可能是群体认同需要。沉默的人越多，打破沉默越困难。皇帝的新装，屋里的大象，沉默的大多数。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>房间里的大象</title>
   <link href="http://nintymiles.github.io/2016/06/04/forward-article-elephant-in-room/"/>
   <updated>2016-06-04T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/04/forward-article-elephant-in-room</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;房间里的大象 - 刘瑜&lt;/h2&gt;
&lt;p&gt;　　沉默是金，人们常说。这话还被写成大字，镶在框里，贴在很多墙壁上。人们用它来告诫自己：言多必失，少说多做，祸从口出，实干兴邦空谈误国。总之，能闭嘴的时候就闭嘴。&lt;/p&gt;

&lt;p&gt;　　但是马丁·路德金说：历史将记取的社会转变的最大悲剧不是坏人的喧嚣，而是好人的沉默。&lt;/p&gt;

&lt;p&gt;　　历史上无数悲剧源于集体沉默。二战期间，普通德国人大多已经隐隐知道那些被推上火车的犹太人的下场，但是他们对此不闻不问，照常买牛奶面包，上班下班，并对迎面走来的邻居温和地问候“早上好”。文革期间，当学生们用皮带抽打老师、或者造反派暴力批斗“走资派”时，也有很多围观群众感到不忍，但他们只是默默地回过头去。今天的中国，朋友们聚餐，点龙虾鱼翅燕窝，结账的时候在座的人中有公职的那位“要一张发票”，这上万块钱的餐费最后摊到了谁头上，不会有人追问。&lt;/p&gt;

&lt;p&gt;　　“房间里的大象”，在英文里，意指所有那些触目惊心地存在却被明目张胆地忽略甚至否定的事实或者感受，就是那些“我们知道，但是我们清楚地知道自己不该知道”的事。“皇帝的新装”是个典型的“房间里的大象”，但“皇帝的新装”只是个隐喻。在一个电视相亲节目中，嘉宾们七嘴八舌地分析某个相亲失败的男人哪句话说错了、哪个表情不当，却绝口不谈他的职业是厨师或者鞋匠的事实，这时候，电视屏幕里站着一只大象。成百上千个人坐在一起煞有介事地开会，但谁都明白这个会只是个橡皮图章而已，在那个会议厅里，同样站着一只大象。&lt;/p&gt;

&lt;p&gt;　　有些时候，沉默也许是起源于善意和礼貌，比如在临终亲友面前，我们不愿意谈起他们的病情，比如和一个口吃的人聊天，我们假装注意不到他的口吃。但是另一些时候，沉默源于怯懦。人们害怕权力，害怕高压，害怕失去升官发财的机会，害怕失去房子车子，于是沉默成了自我保护的机制。高贵是高贵者的墓志铭，沉默是沉默者的通行证。&lt;/p&gt;

&lt;p&gt;　　另一些时候，人们所恐惧的，甚至不是利益上的损失或者肉体上的暴力伤害，而是精神上被自己的同类群体孤立。出于对归属感的依恋，他们通过沉默来实现温暖的“合群”。解放前为理想浴血奋战、出生入死的革命家，解放后却在屡次政–治–运–动中保持沉默、随波逐流，很难说仅仅是因为贪生怕死，更多的恐怕是因为他们害怕被革命队伍抛弃，成为一个“精神上的孤儿”。对认同感、归属感的强烈需要，大约是写在人类基因里的密码，这个密码有时候会成为勇气的源泉，有时候却让我们蒙上了自己的眼睛。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;所以，沉默的人数越多，打破沉默就越难——因为当越来越多的人卷入沉默的漩涡，从这个漩涡中挣脱出来需要的力气就越大。历史上的先知，往往命运悲惨。面对第一个站出来大喊“屋子里有大象”的人，人们往往不会顺着他的手指去看有没有一只大象，而是怒斥他为什么吵醒了自己的好觉。甚至，他们会因为那个人的勇气映照出自己的怯懦而恼羞成怒，你那么大喊大叫干什么?哗众取宠、爱出风头、不识时务，神经病。“沉默如癌细胞般分裂生长”，房间里的大象就这样在“合群”的人们的相互拥抱中越长越大。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　好在随着大象越长越大，它被戳破的可能性也随之加大——因为随着大象越来越大，掩盖这只大象所花费的成本也会越来越高，并且，目击者的增多也意味着出现“叛徒”的可能性在增大。最终，孩子小声的一句嘟囔“皇帝没穿衣服”，就可能使这只充气大象迅速地瘪下去。二战之后，德国人纷纷睁开闭上的眼睛;赫鲁晓夫时代，苏联人也纷纷从对斯大林的崇拜中“醒悟”过来;文革之后，曾经打得不亦乐乎的人们回头看自己的所作所为，也会感到不可理喻。可惜，在众人眼睛的这一闭一睁之间，已经有无数人成了沉默的祭品。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;拒绝发声并不奇怪，因为发声不但需要勇气，而且意味着承担。直视沉默也就是抵抗制度性遗忘和集体性否认的压力，直视生活中不被阳光照耀的角落、被压迫者的痛苦和我们自己的软弱。人们习惯于用政治或社会的压制来为自己的沉默辩护，却往往忘记了正是自己的沉默在为这种压制添砖加瓦。我们尽可以堵上自己的耳朵或者捂上自己的嘴巴，但是当房间里有一只大象时，它随时可能抬起脚来，踩碎我们天下太平的幻觉。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;此文是刘瑜为译著《房间里的大象——生活中的沉默和否认》(伊维塔·泽鲁巴维尔著，胡缠译)所写的序言。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reading notes</title>
   <link href="http://nintymiles.github.io/2016/06/03/x-reading-notes/"/>
   <updated>2016-06-03T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/03/x-reading-notes</id>
   <content type="html">&lt;h2 id=&quot;the-depraved-chinaman---the-wolf-of-wall-street&quot;&gt;The depraved chinaman - the wolf of wall street&lt;/h2&gt;
&lt;p&gt;What’s the relationship between depravity and power? Just one corner of his incontinent life already shocked people much. The following words can depict it:extravagant，promiscuity，young assistant，young broker，Jordan can influence the world。&lt;/p&gt;

&lt;h2 id=&quot;fed-likely-to-avoid-rate-hike-before-britain-votes-on-leaving-eu&quot;&gt;Fed likely to avoid rate hike before Britain votes on leaving EU&lt;/h2&gt;
&lt;p&gt;The Fed Reserve will be &lt;strong&gt;forced?&lt;/strong&gt; to delay a rate hike on its June meeting because mounting concern over the economic fallout from Britain’s vote on whether to leave the European Union.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Swfit Notes - Lazy关键字</title>
   <link href="http://nintymiles.github.io/2016/06/03/swift-notes/"/>
   <updated>2016-06-03T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/03/swift-notes</id>
   <content type="html">&lt;h2 id=&quot;lazy-stored-properties&quot;&gt;Lazy stored properties&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;lazy&lt;/strong&gt; stored property is a property whose initial value is not calculated &lt;strong&gt;until the first time it is used&lt;/strong&gt;. You indicate a lazy stored property &lt;em&gt;by writing the &lt;strong&gt;lazy modifier&lt;/strong&gt; before its declaration&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;lazy关键字标识的属性的含义是，这个属性的值将在第一次使用前才会被初始化，虽然可能已经填写了初始化代码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;另注：lazy 属性只能声明为变量，常量无效报错。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lazy properties are useful when the initial value for a property is dependent on &lt;strong&gt;outside factors&lt;/strong&gt; whose values are not known until after an &lt;em&gt;instance’s initialization is complete&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;swifts-properties&quot;&gt;Swift’s Properties&lt;/h2&gt;
&lt;p&gt;Properties associate values with a particular &lt;em&gt;class&lt;/em&gt;, &lt;em&gt;structure&lt;/em&gt;, or &lt;em&gt;enumeration&lt;/em&gt;. There are two kind of properties:
- stored properties, Stored properties store constant and variable values as part of an instance, Stored properties are provided only by classes and structures.
- computed properties,whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and &lt;strong&gt;&lt;em&gt;enumerations&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-to-access-properties&quot;&gt;How to access properties&lt;/h2&gt;
&lt;p&gt;You can access the properties of an instance using &lt;strong&gt;dot syntax&lt;/strong&gt;. In dot syntax, you write the property name immediately after the instance name, separated by a period (.), &lt;strong&gt;without any spaces&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reference-types&quot;&gt;Reference Types&lt;/h2&gt;
&lt;p&gt;Effectively,reference types are just the different names for the same instance.&lt;/p&gt;

&lt;h2 id=&quot;choosing-between-classes-and-structures&quot;&gt;Choosing Between Classes and Structures&lt;/h2&gt;
&lt;p&gt;Both classes and structures can be use as the build blocks of programmer’s code.&lt;/p&gt;

&lt;p&gt;Normally, structure instances are always passed by value, and class instances are always passed by reference. This means that they are suited to different kinds of tasks.&lt;/p&gt;

&lt;p&gt;A general guideline for using structures:
- The structure’s primary purpose is to encapsulate a few relatively simple data values.
- It is reasonable to expect that the encapsulated values will be copied rather than referenced when you assign or pass around an instance of that structure.
- Any properties stored by the structure are themselves value types, which would also be expected to be copied rather than referenced.
- The structure does not need to inherit properties or behavior from another existing type.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning notes</title>
   <link href="http://nintymiles.github.io/2016/06/03/learning-notes/"/>
   <updated>2016-06-03T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/03/learning-notes</id>
   <content type="html">&lt;h2 id=&quot;sketchscale-tool&quot;&gt;Sketch的Scale Tool&lt;/h2&gt;
&lt;p&gt;使用Cmd+K激活。The tool isn’t same as resizing,it actually scales every property,size,radius,border,&lt;strong&gt;shadow&lt;/strong&gt; and inner &lt;strong&gt;shadow&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Sacle Tool even can take effect on Artboard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;sketchalt&quot;&gt;Sketch的Alt键&lt;/h2&gt;
&lt;p&gt;选中图层后，摁住alt键，会显示选中图层和其他图层的距离(dist)&lt;/p&gt;

&lt;h2 id=&quot;markdown&quot;&gt;MarkDown格式问题&lt;/h2&gt;
&lt;p&gt;普通正文和有格式正文中间须有空行。比如普通正文和unordered list格式之间，但是xxx list格式及缩进xxx list格式之间不需要空行区隔，如果有空行则实际解析也为空行，但是正常的回车符区隔是少不了的。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于jekyll post尤其要注意这点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mac-os-x-ios-&quot;&gt;开发Mac OS X ／iOS 图片文件归档应用&lt;/h2&gt;

&lt;h2 id=&quot;android-activities&quot;&gt;Android Activities怎样工作？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;An app is a collection of activities, layouts, and other resources.&lt;/li&gt;
  &lt;li&gt;By default, each app runs within its own process.&lt;/li&gt;
  &lt;li&gt;You can start an activity in another application by passing an intent with startActivity().（startActivity能力超出预期？）&lt;/li&gt;
  &lt;li&gt;When an activity needs to start, Android checks if there’s already a process for that app.&lt;/li&gt;
  &lt;li&gt;When Android starts an activity, it calls its onCreate() method.(此处入口)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>如何阻止恶意数据爬虫</title>
   <link href="http://nintymiles.github.io/2016/06/03/developer-resource-collections/"/>
   <updated>2016-06-03T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/03/developer-resource-collections</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;针对恶意数据爬虫，有好的方法吗？&lt;/h2&gt;
&lt;p&gt;问了一下专门搞安全的，有两种方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一种是使用robot协议，过滤一下，只允许你希望的&lt;/li&gt;
  &lt;li&gt;另一种是在Nigix之类的配置中写href过滤&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Swift Operators</title>
   <link href="http://nintymiles.github.io/2016/06/02/swift-operators/"/>
   <updated>2016-06-02T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/02/swift-operators</id>
   <content type="html">&lt;h2 id=&quot;nil-coalescing-operator-&quot;&gt;Nil Coalescing operator (??)&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;nil coalescing operator&lt;/strong&gt; (&lt;em&gt;a ?? b&lt;/em&gt;) unwraps an optional a if it contains a value, or returns a default value b if a is nil. The expression a is always of an optional type. &lt;em&gt;The expression b must &lt;strong&gt;match&lt;/strong&gt; the type that is stored inside a.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So it is a special tenary operator case for optional value operating.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The nil coalescing operator is shorthand for the code below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a != nil ? a! : b
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;range-operators&quot;&gt;Range Operators&lt;/h2&gt;
&lt;p&gt;Swift includes two range operators, which are shortcuts for expressing a range of values.
- &lt;strong&gt;Closed Range Operator&lt;/strong&gt;     (闭合范围操作符)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The closed range operator (a...b) defines a range that runs from a to b, and includes the values a and b. The value of a must not be greater than b.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for index in 1...5 {
    print(&quot;\(index) times 5 is \(index * 5)&quot;)
}
// 1 times 5 is 5
// 2 times 5 is 10
// 3 times 5 is 15
// 4 times 5 is 20
// 5 times 5 is 25
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Half Open Range Operator&lt;/strong&gt;  (半开范围操作符)&lt;/p&gt;

    &lt;p&gt;The half-open range operator (&lt;strong&gt;a..&amp;lt;b&lt;/strong&gt;) defines a range that runs from a to b, but does not include b. It is said to be half-open because it contains its first value, but not its final value. As with the closed range operator, the value of a must not be greater than b. If the value of a is equal to b, then the resulting range will be empty.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let names = [&quot;Anna&quot;, &quot;Alex&quot;, &quot;Brian&quot;, &quot;Jack&quot;]
let count = names.count
for i in 0..&amp;lt;count {
    print(&quot;Person \(i + 1) is called \(names[i])&quot;)
}
// Person 1 is called Anna
// Person 2 is called Alex
// Person 3 is called Brian
// Person 4 is called Jack
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Half-open ranges are particularly useful when you work with zero-based lists such as arrays&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Notes</title>
   <link href="http://nintymiles.github.io/2016/06/02/essay-notes/"/>
   <updated>2016-06-02T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/02/essay-notes</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;随笔&lt;/h2&gt;
&lt;p&gt;“Wilbur heard the words of praise.He felt the warm milk inside his stomach.He felt the pleasant rubbing of the stick along his itchy back.” The story is a little hard to tell for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/charlotte_web_book_cover.jpg&quot; alt=&quot;夏洛特的网封面&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Developer Resources Collection</title>
   <link href="http://nintymiles.github.io/2016/06/02/developer-resource-collections/"/>
   <updated>2016-06-02T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/06/02/developer-resource-collections</id>
   <content type="html">&lt;h2 id=&quot;iosios-version-stats-&quot;&gt;iOS各版本安装统计数据（iOS version stats ）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/support/app-store/&quot;&gt;Apple官方渠道数据&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://david-smith.org/iosversionstats/&quot;&gt;AudioBook作者统计数据&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Swift Notes - Classes and Structures</title>
   <link href="http://nintymiles.github.io/2016/05/30/swift-notes/"/>
   <updated>2016-05-30T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/30/swift-notes</id>
   <content type="html">&lt;h2 id=&quot;classes-and-structures&quot;&gt;Classes and Structures&lt;/h2&gt;
&lt;p&gt;Definition:Classes and structures are general-purpose, flexible constructs that become the building blocks of your program’s code.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;same features
  There are some common features in swift  between classes and structures:
    &lt;ol&gt;
      &lt;li&gt;Define properties to store values  - 定义属性以存值&lt;/li&gt;
      &lt;li&gt;Define methods to provide functionality - 定义方法以提供功能&lt;/li&gt;
      &lt;li&gt;Define subscripts to provide access to their values by using subscript syntax - 定义下标以提供使用下标语法进行值的访问&lt;/li&gt;
      &lt;li&gt;Define initializers to set up their initial state - 定义初始化器以设置初始状态&lt;/li&gt;
      &lt;li&gt;Be extended to expand their functionality beyond a default implementation. - 可以被延伸扩展功能，而不是基于默认实现&lt;/li&gt;
      &lt;li&gt;Conform to protocols to provide standard functionality of a certain kind - 符合协议以提供某种标准功能&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;different features
  Classes own features exclusively:
    &lt;ol&gt;
      &lt;li&gt;Inheritance enables one class to have characteristics of another - 类可以继承拥有其他类的特征，而structure不能&lt;/li&gt;
      &lt;li&gt;Type casting enables you to check and interpret the types of a class instance at runtime - 类型转换可以在运行时检查和解析类实例的类型，而structure不能&lt;/li&gt;
      &lt;li&gt;Deinitializers enable an instance of a class to free up any resources it has assigned - 解构器可以让类实例释放已分配的任何资源&lt;/li&gt;
      &lt;li&gt;Reference counting allows more than one reference to a class instance - 引用计数机制允许类实例可以拥有超过一个（&lt;strong&gt;多个&lt;/strong&gt;）引用存在&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Structures are always copied when they are passed around in your code, and do not use reference counting.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Structures are &lt;em&gt;value&lt;/em&gt; types and Classes are &lt;em&gt;reference&lt;/em&gt; types.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;definition-syntax&quot;&gt;Definition Syntax&lt;/h2&gt;
&lt;p&gt;Classes and structures have a &lt;strong&gt;similar definition syntax&lt;/strong&gt;. You introduce classes with the &lt;strong&gt;class&lt;/strong&gt; keyword and structures with the &lt;strong&gt;struct&lt;/strong&gt; keyword.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class SomeClass {
// class definition goes here`
}

struct SomeStructure {
// structure definition goes here
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;identity-operators-&quot;&gt;Identity Operators (身份操作符)&lt;/h2&gt;
&lt;p&gt;We can use identity operators to check whether two constants or variables refer to the same single instance. There are two kinds of identity operators:
1. Identical to (&lt;strong&gt;===&lt;/strong&gt;) 
2. Not identical to (&lt;strong&gt;!==&lt;/strong&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if tenEighty === alsoTenEighty {
    print(&quot;tenEighty and alsoTenEighty refer to the same VideoMode instance.&quot;)
}
// Prints &quot;tenEighty and alsoTenEighty refer to the same VideoMode instance.”

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Note that “identical to” (represented by &lt;strong&gt;&lt;em&gt;three equals signs&lt;/em&gt;&lt;/strong&gt;, or ===) does not mean the same thing as “equal to” (represented by two equals signs, or ==)”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;two-concepts&quot;&gt;two concepts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;“Identical to” means that two constants or variables of class type refer to exactly the same class instance.&lt;/li&gt;
  &lt;li&gt;“Equal to” means that two instances are considered “equal” or “equivalent” in value, for some appropriate meaning of “equal”, as defined by the type’s designer.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The true side of the world</title>
   <link href="http://nintymiles.github.io/2016/05/28/article-forward-wanghaibin/"/>
   <updated>2016-05-28T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/28/article-forward-wanghaibin</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;世界真实的一面&lt;/h2&gt;
&lt;p&gt;— 转自王海滨博客&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;本文重口味,小清新慎入.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下午我写了篇台湾选举的文章,有人留言说:作为生下来就被剥夺选举权的大陆人来说，有什么资格去质疑台湾人民的选择？&lt;/p&gt;

&lt;p&gt;我以前写过不少的民主文章，如果你有耐心去翻，还是能够了解一点社科知识，虽然是来自一个草莽研究者的笔下。民主是一种手段，不是一种结果，更不是一种信仰，决不可能是一种宗教。&lt;/p&gt;

&lt;p&gt;西方世界的哲人苏格拉底曾表示：民主体系是所有政体中最糟糕的一种。&lt;/p&gt;

&lt;p&gt;但这不是指近现代的英国体系和美国民主体系。&lt;/p&gt;

&lt;p&gt;民主体系有着极其严谨的设置，以防范乌合之众的多数人暴政。它呈现的是权力制衡和顾及全体人利益，而非对部分人的侵害和牺牲，来满足其他人的利益。&lt;/p&gt;

&lt;p&gt;最近因为特朗普的崛起，很多人关注了美国大选。初选的过程让中国人了解了美国选举代表人制度的不同，这并不是一个人数取胜的简单多数人选举制度。其超级代表的设置和赢家通吃的设置，是相互制衡的。在国会选举中，以人数和州来定义议员的数字，也是在表达多数人意愿和少数人州的意愿不要在联邦层面受损，这也是一种制衡。你可以联想到在每一级政府，从州到郡市都是同样的设计。&lt;/p&gt;

&lt;p&gt;为何苏格拉底曾经发出这样的声音？他作为民主的敌人，后来被雅典人判决为死罪。&lt;/p&gt;

&lt;p&gt;因为他在上千年之后的法国人之前，就看到了乌合之众的毁灭性。&lt;/p&gt;

&lt;p&gt;社会行为心理学告诉我们，一群人聚集在一起，智商向最短的那块板靠拢；人们聚拢在一起，群体行为容易导致卸责，法不责众的现实在全球通用，人们容易做出邪恶的事情；而当人们聚集在一起，易于煽动的情绪感染，会让人们轻易的去相信一件事情，情绪化导致群氓效应产生，逻辑和长期眼光都不复存在，容易做出既损害他人，也损害自己长远利益的事情。&lt;/p&gt;

&lt;p&gt;这就是民主的致命之处。&lt;/p&gt;

&lt;p&gt;所以，当那位读者留言，说生下来就被剥夺选择权的大陆人，有什么资格去质疑台湾人的选择呢？&lt;/p&gt;

&lt;p&gt;我不能说你错了，但即使是生来就被剥夺选举权—注意我不是说选择权，仍旧有资格质疑台湾人的选择，因为当台湾在煽动民粹的时候，一群失去理性的乌合之众的群氓行为，连自己祖母被日本人掠作慰安妇都会去辩成自愿才觉得骄傲的卑劣心理，去反对教科书修改写错别字的文盲行为等等，诸如此类的白痴做法，都让人想起苏格拉底的警告和法国人对乌合之众的描述。&lt;/p&gt;

&lt;p&gt;煽动意识形态的撕裂，制造敌人，不仅仅是这种类似民主的民粹主义做法，这种做法曾诞生了法西斯主义，选举出了希特勒；也是极权体系下极左常用的手法，制造一种敌人，然后再制造一种敌人，剥夺他们的财务和人身自由，甚至夺去生命。&lt;/p&gt;

&lt;p&gt;群氓在这两种体系下，表现都是一样的。&lt;/p&gt;

&lt;p&gt;所以，这里我们要回到文章的正题，世界的真相是怎么样的？&lt;/p&gt;

&lt;p&gt;有台湾同胞跑来和我争辩,说台湾妇女团体只是争议强制慰安两个字,有许多妇女当年是自愿的，所以对历史留个空白.&lt;/p&gt;

&lt;p&gt;我只能对台湾妇女团体的智商和无耻表示同情.台湾看来皇化的比较彻底,和日本人否定南京大屠杀有得一拼.日本人一直和中国人纠结三十万人死亡的事实,他们说没有死三十万人,举出各种数据,用逻辑推演.&lt;/p&gt;

&lt;p&gt;强盗逻辑就是这样的,我到你家杀了人,抢了东西,没什么不好意思的,不用道歉.你说我杀了你家三个孩子,你家不是还剩了一个吗?你这是污蔑我.&lt;/p&gt;

&lt;p&gt;我说的对吧,台湾同胞们?一场侵略战争中,妇女无论何种原因,变成了一群士兵的性工具,这都不是件值得骄傲和争辩的事情.这居然成了抠字眼的游戏,能让当年的慰安妇很高兴的出来说:感谢妇女团体,感谢自由民主,我当年是自愿去被日本人操的啊,幸亏今天你们帮我昭雪了,否则哪里说理去?今天我总算可以挺胸抬头出去,逢人便说,我当年是自愿被操的了.&lt;/p&gt;

&lt;p&gt;我理解的对吧?&lt;/p&gt;

&lt;p&gt;至于说错别字那章节,我是讽刺那帮孩子们,中文都没学好,就去反课纲,错别字一堆,被媒体拍个正脸.&lt;/p&gt;

&lt;p&gt;不要自诩为自由民主社会,资讯发达.专制社会下,信息是封闭的.你觉得我这样的人会看不到海外大量的信息吗?那我怎么看到小英姐的演说呢了?&lt;/p&gt;

&lt;p&gt;事实上,是海外信息看多了,照样感觉整个世界上一堆堆垃圾,脑残的人到处都有,持两分法看世界的意识形态之争到处都有.&lt;/p&gt;

&lt;p&gt;我在中国的十几个大小城市居住过至少半年以上,在许多国家长时间的停留,多次出入,生活在他们中间.了解这个世界的所谓权贵富豪、底层人民。我们一家住过长达5年的所谓上海贫民窟；见识过美国底层的生活状态；也在美国与奥巴马的政治后援团交谈；曾和加州富豪交往；见过夏威夷顶级的游说公司。在国内和各层官员有过交集；富二代和权二代都曾经在身边晃过；美国著名的经济学教授我也密切交往了一年多。&lt;/p&gt;

&lt;p&gt;而我和台湾人打了十几年的交道。&lt;/p&gt;

&lt;p&gt;林林总总，您觉得我不会了解这个世界的虚妄和荒谬？不了解光鲜口号下的自私和迷茫？&lt;/p&gt;

&lt;p&gt;其实这一系列文章重点不是讨论台湾，结果话题一扯，就跑偏这么多了。&lt;/p&gt;

&lt;p&gt;上海城市中心有贫民窟，在外环外有贫民窟。你一定不能理解前一点，实际上在上海一些庞大的社区里，很多大房型都被切割成了群租房，每间几个平方米大小。我们一家曾经住过的一间，只能放一张床，一个拆卸式的衣柜，就是骨架是铁管，塑料布蒙起来那种。&lt;/p&gt;

&lt;p&gt;这里面住了外来的打工仔、妓女和其他无处可去的底层，因其廉价，在市中心。房子大厅空气里弥漫着粪尿油烟及其他各种莫名气味，楼下有路边摊，一群小贩用地沟油炒面和菜，五六元一碗。这是底层绝望的生活。&lt;/p&gt;

&lt;p&gt;群租房经常会被行政当局来驱赶和拆，路边摊经常被城管赶来赶去。&lt;/p&gt;

&lt;p&gt;见多了底层的绝望、愤怒；也见多了底层的任劳任怨，寻找着机会，以一技之长和苦作一周七天的精神，养家活口，积攒钱财，爬出烂泥坑。&lt;/p&gt;

&lt;p&gt;我也在洛杉矶、纽约、檀香山看到那些流落街头的人，浑身肮脏，带着一个大包，坐在街头，低头不语一小时、半天、一整天。在缅甸郊外看见农民一间间用草编席子围绕的几平米房屋，我坐在仰光街头和惊讶的当地人坐在摊子前，一起吃一点米饭和菜蔬。&lt;/p&gt;

&lt;p&gt;我也在美国的这些地方和真正的富豪饮茶吃饭，听他们讲孩童的教育，讲当地议员的交往，讲北京太子党如何通过他们移民。听奥巴马后援团里精英讲述哪些地域可以争夺选票。听游说公司谈论如何帮助当地市长竞选。&lt;/p&gt;

&lt;p&gt;我在二十年前，无法读懂财经报刊的文章，到生意失败时，我虽然能看懂产业，却仍旧对金融和经济一知半解；而经历人世间的苦难和荣华之后，在寻求哲学和宗教的心灵指引失败之后。我写了几千万文字，散落在网络间；每年读上千万字，到处寻找能够交谈的人。&lt;/p&gt;

&lt;p&gt;于是读书的速度越来越快，阅读世界的时间也越来越少，出门渐渐稀疏。&lt;/p&gt;

&lt;p&gt;因为你读过几本真正的书，就洞悉人类心灵；你去过一个地方，就去过了全世界。&lt;/p&gt;

&lt;p&gt;所有的浮光掠影都只是浮光掠影。&lt;/p&gt;

&lt;p&gt;很多很多年前，我那是其实不年轻了，但头脑仍旧年轻，和一个洋鬼子生意人聊天，他在中国待了十年。我们谈及民主，我总以为老外会更容易接受民主自由观念。&lt;/p&gt;

&lt;p&gt;他狠狠的给我上了一课，说michael,你以为欧洲的政客不贪污吗？你以为拉美的政客不贪污吗？你以为东南亚的政客不贪污吗？你以为美国的政客不捞好处吗？&lt;/p&gt;

&lt;p&gt;那政客为何要从事政客这个职业呢？&lt;/p&gt;

&lt;p&gt;我当时很鄙视他，从此断绝来往。&lt;/p&gt;

&lt;p&gt;十年后，我在美国和一个游说公司老总的父亲聊天，他说：michael，你以为美国的市长、议员不贪污，不贪财？他们只是换了一种形式，你看看市长、议员、总统们离职后，在大公司、银行演讲拿到的巨额演讲费，做顾问获得的年薪。你觉得这是什么？&lt;/p&gt;

&lt;p&gt;前两天我因为私事，极端厌恶一个国家。朋友劝我，海滨，你明白这个世界都是一样的，只是这里的人吃相比较好一点，你为何不能容忍呢？这世界没有理想国。&lt;/p&gt;

&lt;p&gt;是的，道德洁癖无助于生活在现实中。
    
所有的体系都是为了效率和稳定。&lt;/p&gt;

&lt;p&gt;所有的效率和稳定是为了什么？&lt;/p&gt;

&lt;p&gt;所有的体系都有规则，只不过有些社会是明规则，有些社会是潜规则。&lt;/p&gt;

&lt;p&gt;回到前面的问题，答案是，所有的效率和稳定，都是为了和平的、和风顺雨的保证利益集团收割牧民。&lt;/p&gt;

&lt;p&gt;印度教发明了种姓制度，有利于让底层认命，维持社会稳定，满足生产需要，提高社会效率。&lt;/p&gt;

&lt;p&gt;佛教发扬光大了轮回，有利于让底层认命，维持社会稳定，满足生产需要，提高社会效率。&lt;/p&gt;

&lt;p&gt;基督教制造了天堂和地狱，有利于让底层求死后天堂，维持社会稳定，满足生产需要，提高社会效率。&lt;/p&gt;

&lt;p&gt;民主派制造了普世价值，有利于让各阶层认为获得了平权和自由，维持社会稳定，满足生产需要，提高社会效率。&lt;/p&gt;

&lt;p&gt;主义们制造了现世的乌托邦，失败于让底层认命，不能长期维持社会稳定，不能满足生产需要，不能提高社会效率。&lt;/p&gt;

&lt;p&gt;但选票的需求和主义的供应失败，都让位于收买，用免费来收买权力。&lt;/p&gt;

&lt;p&gt;原始人类对世间万物心存恐惧，于是万物有灵，有了祭祀。&lt;/p&gt;

&lt;p&gt;人们是真的相信未知的神灵。&lt;/p&gt;

&lt;p&gt;祭祀或信，或不信，但得到了权柄。部落领袖信或不信，依赖于祭祀给与的神灵背书。&lt;/p&gt;

&lt;p&gt;于是权力得以存在。&lt;/p&gt;

&lt;p&gt;人性自私而贪婪，狭隘而排他，嗜血而性情不稳，于是宗教、集体、国家、组织成为凝聚力。掌握神旨者，掌握权力，掌握权力者掌握规则，掌握规则者掌握武力，掌握武力者掌握财富。&lt;/p&gt;

&lt;p&gt;在民主社会未起时，是这样的。&lt;/p&gt;

&lt;p&gt;清教徒的国家里，或者多神教的国家里，人直接面对神，神仆再无法干预权力。于是掌握规则者，掌握财富与话语权，掌握财富与话语权者，掌握权力与规则。&lt;/p&gt;

&lt;p&gt;人类的群氓行为，注定会成为无政府主义者，他们缺乏了信仰和规则的约束，就只能在广袤的土地上，以熟人社会存在，社会就失去了效率，人类也无法前行。&lt;/p&gt;

&lt;p&gt;有些人独立思考，他们信或不信神，都会前行，试图引领和影响整个世界，制定和修改了整个体系。这些人或为利他主义的人类情怀，或为神的旨意指引，或为自私自利的大贼心态，或三者兼而有之。&lt;/p&gt;

&lt;p&gt;他们洞悉群氓的行为，试图控制整个人类社会。&lt;/p&gt;

&lt;p&gt;在自觉与不自觉中，印度教的种姓制度被建立了，贱民被稳定的锁在底层的命运，被整个习俗缠绕，被心理的卑微压制，于是整个社会在各阶层间屏蔽垂直流动，只在自身的阶层流动。这样的社会呈现了数百年的稳定。&lt;/p&gt;

&lt;p&gt;佛教是一个平权的宗教，但终究被统治者发现了轮回宿命对信众的压制，也用来稳定整个社会的阶层。许多人放弃了命运的挣扎，只求来生的福报。统治者最终也相信了这一个信仰体系，他们追索自身灵魂的安放，接受佛陀给与自己的统治他人的命运，并求心灵的顿悟，并要求国民接受命运的安排，安于各阶层的命运，贫穷和富贵，富贵者要捐助，救助底层，以求来时。&lt;/p&gt;

&lt;p&gt;一神教曾有神仆垄断了神的旨意，凌驾于国王与各阶层之上，只要参考古代祭祀社会就可以了。&lt;/p&gt;

&lt;p&gt;以色列人曾在亡国前，不断的有聪明的强人，去向不同的统治者：埃及、希腊人、罗马人等等要求祭祀的地位，承诺支付多少税金，掉头以祭祀的身份，统治以色列人，榨取财富和一切，直到周而复始的亡国，被强国掳掠，金银被从圣殿夺走，圣殿被焚毁，妇女被强奸，成年男子被屠杀或奴役，最终彻底的灭国，犹太人流落四方。于是犹太人始终相信基督尚未降临，他来的那一刻既是毁灭，因为世间过于苦难。&lt;/p&gt;

&lt;p&gt;清教徒在几乎杀光了所有的印第安人之后，建立了一个伟大的民主国家，美国的先哲可能看到自己杀戮的本性，意图建立一个完善的权力制衡体系，去约束人的邪恶本性。求助于神是无助于约束贪婪和杀戮的，一神教的最大罪恶不过是不信神，基督教的七宗罪之首只不过是骄傲。因而必须以世间的权力制衡体系，去约束这群嗜血的众人。&lt;/p&gt;

&lt;p&gt;所以，我们看到了一个平全社会的建立。&lt;/p&gt;

&lt;p&gt;而美国的先哲看到了古希腊民主社会里群氓效应的巨大破坏力，因此才在平权体系里建立了平衡多数人选票和少数人州郡的选举体系。并以独立的法院体系，垂直约束整个行政和司法体系。&lt;/p&gt;

&lt;p&gt;同时在宪法中约定了一些最基本的权力，不可以通过选举去改变！&lt;/p&gt;

&lt;p&gt;但是在经历了二百年之后，美国的利益团体还是逐渐的掌握了整个制定规则的权力，在宪政和平权体系之下，建立了新的阶层屏障。&lt;/p&gt;

&lt;p&gt;整个教育体系，与富人区和穷人区的房价一起，并社区治安不同，成为整个美国贫富分化，阶层隔离的围墙。富人区得以维系社区教育优质资源，与良好的治安一起，制造了一个个穷人无法进入的富人社区。权贵的子弟进入更高级别的精英私立学校，不仅仅是金钱，还要依赖阶层背书才能够进入。&lt;/p&gt;

&lt;p&gt;唯一开放的管道，是权贵精英阶层为了保持阶层的流动性，不要腐朽，因而开放了对平民子弟里最优秀者的上升通道，可以让平民进入。&lt;/p&gt;

&lt;p&gt;除此外，你可以凭借创业上升，试问一下，在当今的美国社会，还有哪一类传统生意是可以白手起家吗？&lt;/p&gt;

&lt;p&gt;而医疗体系又称为当政者用来收买底层人心，保住选票，并以其昂贵能够发展生命科技，促使整个精英层的寿命越来越长。&lt;/p&gt;

&lt;p&gt;美国是一个不显山露水的金字塔社会，精英层的富贵不是豪宅游艇跑车，而是自由。生命的自由增长，来自于生命科技；行动的自由，来自太空科技；权力的自由，来自财富对规则的自由制定；思想的自由，来自于通透的精英教育。&lt;/p&gt;

&lt;p&gt;于是社会鸿沟成为天堑。&lt;/p&gt;

&lt;p&gt;平民只能游离于蓝领职业和服务业，甚至这些工作也逐渐在被机器人替代，未来的平民能够做什么，不得而知。&lt;/p&gt;

&lt;p&gt;威权主义国家，有不同的形式。&lt;/p&gt;

&lt;p&gt;宗教背书的君权神授国家，人民安于命运，权贵顺利收割。&lt;/p&gt;

&lt;p&gt;而无宗教背书的国家，王侯将相宁有种乎，权力体系始终有着致命的缺陷。其不稳定性，使得从上到下，人人自危，没有一个人有安全感。&lt;/p&gt;

&lt;p&gt;这样的国家只能依靠金钱的赎买，也就是经济目标的指引，换取国民对统治合法性的短暂承认。&lt;/p&gt;

&lt;p&gt;道教当年未能在中国成为强有力的宗教，是因为道教要修现世，让人们得道成仙。这种始终无法证实的仙迹，导致了道教的失败，只能融入儒释道文化里，沦为边缘宗教。&lt;/p&gt;

&lt;p&gt;老马想成为先知，但错误的定义了现世的乌托邦。&lt;/p&gt;

&lt;p&gt;要成为先知的必要条件是，必须要找到一个永远不能证伪的神、天堂、地狱，其次要一手拿着经书，一手拿着刀剑。&lt;/p&gt;

&lt;p&gt;老马的教义里只有乌托邦，现世的天堂只要数十年就被证伪不存在，他的追随者只剩下经书和刀剑。&lt;/p&gt;

&lt;p&gt;这是不长久的。&lt;/p&gt;

&lt;p&gt;中国这样的国家，只有回到儒释道精神，结合天人合一的祖先崇拜习俗，重立宗教背书的上层建筑。至于走向哪一种体制，民主或威权，都不重要。&lt;/p&gt;

&lt;p&gt;因为人类社会的本质都是一个。&lt;/p&gt;

&lt;p&gt;中国也已经有了教育壁垒，有了学区房，有了阶层壁垒，而吃相比欧美更难看。&lt;/p&gt;

&lt;p&gt;欧美的吃相是穿西装打领带，铺上桌布，刀叉立于两旁，把人们洗刷干净，为避免虐杀嫌疑，保证食物权力，需要用电击杀，不要放血，烤的三份生，带着血丝，上来后，食客们先向神祷告，感谢神赐予并洁净桌上的食物，就着红酒，闭着嘴咀嚼，把人们生吞活剥。&lt;/p&gt;

&lt;p&gt;怎一个文雅说的尽？&lt;/p&gt;

&lt;p&gt;中国的吃相是一棍子击杀，割喉放血，时而生吃，时而煎炸，就着白酒，大声谈笑，碎末乱飞。&lt;/p&gt;

&lt;p&gt;粗俗啊。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;人类的终局&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;终局一：悲观选择&lt;/h3&gt;

&lt;p&gt;机器替代劳工之后，劳工只有一再降低自己的要价，去和机器的成本比较。&lt;/p&gt;

&lt;p&gt;最终失败。&lt;/p&gt;

&lt;p&gt;人类社会的财富集中于掌握知识和规则的精英，经济危机频发。&lt;/p&gt;

&lt;p&gt;拯救经济危机的货币宽松与紧缩掠夺中下层。&lt;/p&gt;

&lt;p&gt;神说，夺取少的仅有的，给多的更多。&lt;/p&gt;

&lt;p&gt;但消费开始消失。&lt;/p&gt;

&lt;p&gt;极少数的人类开始有数百年的寿命、太空漫游，机器在地球工作。&lt;/p&gt;

&lt;p&gt;人类大量消亡。&lt;/p&gt;

&lt;p&gt;最后的人类开始觉得生命寂寞乏味。&lt;/p&gt;

&lt;p&gt;有的放逐自己死去，&lt;/p&gt;

&lt;p&gt;有的与机器结合，将精神与灵魂上传到网络。&lt;/p&gt;

&lt;p&gt;机器世界里，只有少数的灵魂。&lt;/p&gt;

&lt;p&gt;灵魂最终绝望，终止了程序运转，机器在电力消耗殆尽后终止。&lt;/p&gt;

&lt;p&gt;地球恢复了平静，万物生长。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;终局二：乐观选择&lt;/h3&gt;

&lt;p&gt;非知识层的人类消亡在地球。&lt;/p&gt;

&lt;p&gt;进化的人类进入了银河系，开始繁衍扩张。&lt;/p&gt;

&lt;p&gt;他们创造了新的神，于是心有所属。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Swift Learning Notes  - Function</title>
   <link href="http://nintymiles.github.io/2016/05/23/swift-notes/"/>
   <updated>2016-05-23T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/23/swift-notes</id>
   <content type="html">&lt;h2 id=&quot;variadic-parameters&quot;&gt;Variadic parameters&lt;/h2&gt;
&lt;p&gt;A variadic parameter accepts zero or more values of a specified type.Write variadic parameters by inserting three period characters (…) after the parameter’s type name.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A function may have at most one variadic parameter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;in-out-parameters&quot;&gt;In-Out parameters&lt;/h2&gt;
&lt;p&gt;You write an in-out parameter by placing the inout keyword at the &lt;strong&gt;start&lt;/strong&gt; of its parameter definition. An &lt;strong&gt;&lt;em&gt;in-out&lt;/em&gt;&lt;/strong&gt; parameter has a value that is passed in to the function, is modified by the function, and is passed back out of the function to replace the original value.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Usually, function parameters are &lt;strong&gt;constants&lt;/strong&gt; by default. Trying to change the value of a function parameter from within the body of that function results in a compile-time error. This means that you can’t change the value of a parameter by mistake.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func swapTwoInts(inout a: Int, inout _ b: Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;function-types&quot;&gt;Function types&lt;/h2&gt;
&lt;p&gt;function types just like any other types in Swift.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var mathFunction: (Int, Int) -&amp;gt; Int = addTwoInts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Function types as parameter types
  You can use a function type such as (Int, Int) -&amp;gt; Int as a parameter type for another function. This enables you to leave some aspects of a function’s implementation for the function’s caller to provide when the function is called.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func printMathResult(mathFunction: (Int, Int) -&amp;gt; Int, _ a: Int, _ b: Int) {
    print(&quot;Result: \(mathFunction(a, b))&quot;)
}
printMathResult(addTwoInts, 3, 5)
// Prints &quot;Result: 8&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Function types as return types
  You can use a function type as the return type of another function. You do this by writing a complete function type immediately after the return arrow (-&amp;gt;) of the returning function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nested-functions&quot;&gt;Nested functions&lt;/h2&gt;
&lt;p&gt;All of the functions you have encountered so far in this chapter have been examples of &lt;strong&gt;global&lt;/strong&gt; functions, which are defined at a &lt;strong&gt;global scope&lt;/strong&gt;. You can also define functions &lt;strong&gt;inside the bodies&lt;/strong&gt; of other functions, known as nested functions.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nested functions are hidden from the outside world by default, but can still be called and used by their enclosing function. An enclosing function can also &lt;strong&gt;return&lt;/strong&gt; one of its nested functions to allow the nested function to be used in &lt;strong&gt;another scope&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Nested functions can make implementation certain level privacy&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func chooseStepFunction(backwards: Bool) -&amp;gt; (Int) -&amp;gt; Int {
    func stepForward(input: Int) -&amp;gt; Int { return input + 1 }
    func stepBackward(input: Int) -&amp;gt; Int { return input - 1 }
    return backwards ? stepBackward : stepForward
}
var currentValue = -4
let moveNearerToZero = chooseStepFunction(currentValue &amp;gt; 0)
// moveNearerToZero now refers to the nested stepForward() function
while currentValue != 0 {
    print(&quot;\(currentValue)... &quot;)
    currentValue = moveNearerToZero(currentValue)
}
print(&quot;zero!&quot;)
// -4...
// -3...
// -2...
// -1...
// zero!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Swift Learning Notes  - Closure</title>
   <link href="http://nintymiles.github.io/2016/05/21/swift-notes/"/>
   <updated>2016-05-21T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/21/swift-notes </id>
   <content type="html">&lt;h2 id=&quot;closure-definition&quot;&gt;Closure Definition&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Closures are &lt;strong&gt;self-contained blocks of functionality&lt;/strong&gt; that can be &lt;strong&gt;passed around&lt;/strong&gt; and &lt;strong&gt;used&lt;/strong&gt; in your code.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Closures are similar to blocks in C and Objective C&lt;/li&gt;
  &lt;li&gt;Closures can &lt;strong&gt;capture&lt;/strong&gt; and &lt;strong&gt;store&lt;/strong&gt; &lt;strong&gt;references&lt;/strong&gt; to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; constants and variables &lt;em&gt;from the context in which they are defined&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Global and nested functions are special cases of closures,not all kinds of functions.
    &lt;ul&gt;
      &lt;li&gt;Global functions are closures that have a name and do not capture any values&lt;/li&gt;
      &lt;li&gt;Nested functions are closures that have a name and can capture values from their enclosing function&lt;/li&gt;
      &lt;li&gt;Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Closure syntax optimisation&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Inferring parameter and return value types from context Implicit returns from single-expression closures (&lt;em&gt;two key point here&lt;/em&gt;)&lt;/li&gt;
      &lt;li&gt;Shorthand argument name&lt;/li&gt;
      &lt;li&gt;Trailing closure syntax&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Closure syntax expression&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(parameters)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;necessary&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Code implementation block must be started on a new line,even in optimization style。otherwise it will raise error in playground.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let reversed=names.sort({(s1: String,s2: String) -&amp;gt; Bool in
        return s1 &amp;gt; s2 })

let revesed2=names.sort({(s1,s2) in
        return s1 &amp;gt; s2});

let reversed3=names.sort({s1,s2 in
        s1 &amp;gt; s2})
        
let reversed4=names.sort({
        $0 &amp;lt; $1})
        
let reversed5=names.sort( &amp;lt; ) //The most simpliest way is operator function. no new line required, but it seems weired.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Operator function，&lt;strong&gt;Swift’s String type defines its string-specific implementation of the greater-than operator (&amp;gt;) as a function that has two parameters of type String, and returns a value of type Bool*.&lt;/strong&gt; *This exactly matches the function type needed by the sort(_:) method. *So the operator function simple style is just a special case? *&lt;/li&gt;
  &lt;li&gt;Trailing closure,&lt;strong&gt;A trailing closure is a closure expression that is written outside of (and after) the parentheses of the function call.&lt;/strong&gt;  If you need to pass a closure expression to a function as the function’s final argument and the closure expression is long, it can be useful to write it as a trailing closure instead.&lt;/li&gt;
  &lt;li&gt;Trailing closure more simpler style,If a closure expression is provided as the function or method’s only argument and you provide that expression as a trailing closure, &lt;em&gt;you do not need to write a pair of parentheses ()&lt;/em&gt; after the function or method’s name when you call the function&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Collection classes’ sort(_:) method_will produce a new collection that has the same size and type as the old one. the original collection is not modified by the sort(_:) method._&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;function-parameter-names&quot;&gt;Function Parameter Names&lt;/h2&gt;
&lt;p&gt;Function has two kind of parameter name,one is external parameter name,the other is local parameter name.
- external parameter name is used to label arguments passed to a function call
- local parameter name  is used in the implementation of the function&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Surfing notes 5.21</title>
   <link href="http://nintymiles.github.io/2016/05/21/surfing_notes/"/>
   <updated>2016-05-21T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/21/surfing_notes</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;杠杆到了非去不可的时候-如松&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;权威人士发言通篇都是“杠杆”&lt;/li&gt;
  &lt;li&gt;认为杠杆到了非去不可的时候
    &lt;ul&gt;
      &lt;li&gt;大宗下降到一定程度后，进口就会增长，会推进贸易逆差。&lt;/li&gt;
      &lt;li&gt;资本外流加上贸易逆差。如果放任杠杆，则资产价格和生产成本都会飙升，那么进口增加会更快，导致贸易逆差更大。&lt;/li&gt;
      &lt;li&gt;后果是“甚至让储蓄泡汤”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Reading notes 5.18-5.20</title>
   <link href="http://nintymiles.github.io/2016/05/18/reading_notes/"/>
   <updated>2016-05-18T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/18/reading_notes</id>
   <content type="html">&lt;h2 id=&quot;wild-and-expressive-language&quot;&gt;Wild and expressive language.&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;… I was sitting in my office,behind a desk fit for a dictator,in a chair as big as  a throne …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;google-defines-post-smart-phone-era&quot;&gt;Google defines “post smart phone era”&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Google彻底展现出其争霸“后智能手机”的野心——成为一个超级智能平台。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;人工智能平台 Google Home&lt;br /&gt;
 &lt;em&gt;Google Assistant被视作亚马逊 Alexa、苹果Siri以及微软Cortana的竞争产品。&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;VR平台——Daydream&lt;/li&gt;
  &lt;li&gt;汽车驾驶平台——Google Auto&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section&quot;&gt;&lt;em&gt;关于几条新闻的一点看法&lt;/em&gt; - 秦慕楚&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;自透漏的阅读习惯&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;晚睡早起，阅读在晚上，清晨花一个小时浏览网站。如有交易计划或意图，则不看新闻，免于被即时情绪打扰。微信微博QQ等保持隔离状态，认为信息真假难于甄别。认为在信息免费及信息爆炸的时代，人更不自由，更无自我。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;金融危机后，新闻的实时性、透明性、公开性、公正性被破坏殆尽&lt;/li&gt;
  &lt;li&gt;对一些新闻的甄别
    &lt;ol&gt;
      &lt;li&gt;欧盟不承认市场经济地位，对经济影响很大，接着会有各种反倾向和辅助手段&lt;/li&gt;
      &lt;li&gt;委国的援助又是白送，出于老板的面子或者灰色需求&lt;/li&gt;
      &lt;li&gt;任正非公开评论房地产，说明华为类实业企业已受困于房地产，至于存亡之地。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;&lt;em&gt;持续加息预期的大门已经打开_股事&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;认为今年9月左右，FED将开启持续加息的进程，很多地方的泡沫将会破灭，各种危机不断。&lt;/p&gt;

&lt;h2 id=&quot;taiwans-first-female-leader-swore-in&quot;&gt;Taiwan’s first female leader swore in&lt;/h2&gt;

&lt;h2 id=&quot;caishenkun&quot;&gt;Caishenkun的博客写的不错，比较切中实事&lt;/h2&gt;

&lt;h2 id=&quot;section-2&quot;&gt;关于债务违约或发债难的微博160520-日高天凉&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;过剩产能不产生利润，企业靠银行“融资”存活&lt;/li&gt;
  &lt;li&gt;银行如果停贷，股市目前情形无法融资，债市情形无法发债，只能倒闭，且会连锁倒闭&lt;/li&gt;
  &lt;li&gt;认为过剩产能企业是对资本的侮辱，越早倒闭越好&lt;/li&gt;
  &lt;li&gt;认为汇率失守时，汇率和利息只会保汇率，然后如俄一般狂拉利率&lt;/li&gt;
  &lt;li&gt;利率提升后银行会漏出白花花的屁股（坏账），西门失守，东门守住也没意义&lt;/li&gt;
  &lt;li&gt;汇率不保后，会如委国&lt;/li&gt;
  &lt;li&gt;博主应该对奥派行为经济学等有较深认识，直击本质&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Willie's recent drawing collection</title>
   <link href="http://nintymiles.github.io/2016/05/15/willie-drawing-collection/"/>
   <updated>2016-05-15T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/15/willie-drawing-collection</id>
   <content type="html">&lt;h2 id=&quot;handmade-cutout&quot;&gt;Handmade cutout.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/handmade_cutout.png&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;willie-self-made-calabash-7-brothers&quot;&gt;Willie self-made calabash 7 brothers.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/Calabash_7_brothers.png&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;car-in-driving&quot;&gt;Car in driving.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/driving_car_201605.png&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Swift Learning Notes 2 - Optional and Enumeration</title>
   <link href="http://nintymiles.github.io/2016/05/11/swift-notes/"/>
   <updated>2016-05-11T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/11/swift-notes</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Swift can be thought of as Objective-C reimagined using modern concepts and safe programming patterns. In Apple’s own words, Swift is like Objective-C without
the C. Chris Lattner, the creator of Swift, said Swift took language ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. At WWDC 2014, Apple really stressed that Swift was safe by default. Swift was designed to eliminate many common programming errors, making applications more secure and less prone to bugs. Swift 2 added two additional core features to the language—availability and error handling—which are designed to make it even easier to write safe code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;optional-variables&quot;&gt;Optional variables&lt;/h2&gt;
&lt;p&gt;In Swift,normally,the variables are considered to be nonoptional. an optional variable is a variable that we are able to assign nil (no value) to. &lt;strong&gt;Optional variables and constants are defined using &lt;em&gt;?&lt;/em&gt; (question mark).&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Optional variables were added to the Swift language as a safety feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use force unwrapping, we must  rst make sure that the optional has a non-nil value and then we can use the explanation point to access that value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name: String?
Name = &quot;Jon&quot;
if name != nil {
    var newString = &quot;Hello &quot; + name!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We use &lt;strong&gt;optional binding&lt;/strong&gt; to check whether an optional variable or constant has a non-nil value, and, if so, assign that value to a temporary variable. For optional binding, we use the &lt;strong&gt;if-let&lt;/strong&gt; or &lt;strong&gt;if-var&lt;/strong&gt; keywords together. If we use if-let, the &lt;strong&gt;&lt;em&gt;temporary&lt;/em&gt;&lt;/strong&gt; value is a constant and cannot be changed, while the if-var keywords puts the temporary value into a variable that allows us to change the value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if let temp = myOptional {
    print(temp)
    print(&quot;Can not use temp outside of the if bracket&quot;)
} else {
    print(&quot;myOptional was nil&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also test multiple optional variables in one line. We do this by separating each optional check with a comma. The following example shows how to do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   if let myOptional = myOptional, myOptional2 = myOptional2,
   myOptional3 = myOptional3 {
     // only reach this if all three optionals
     // have non-nil values
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Within the optional binding zone,value type variable’s changing is &lt;strong&gt;independent&lt;/strong&gt;.so it doesn’t affect the value of the outter variable,even the variable is declared outter the scope. But reference type variable’s changing is &lt;strong&gt;relative&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Optional chaining&lt;/strong&gt; allows us to call properties, methods, and subscripts on an optional that might be nil. If any of the chained values return nil, the return value will be nil.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s = car?.tires?.tireSize
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;enumerations&quot;&gt;Enumerations&lt;/h2&gt;
&lt;p&gt;Enumerations (otherwise known as enums) are a &lt;strong&gt;special&lt;/strong&gt; data type that enables us
to &lt;strong&gt;group&lt;/strong&gt; related types together and use them in a &lt;strong&gt;type safe&lt;/strong&gt; manner.&lt;/p&gt;

&lt;p&gt;enums in Swift are &lt;strong&gt;not tied to integer values&lt;/strong&gt;. We can define an enum with a type (string, character, integer, or floating-point) and then it’s actual value (known as the raw value) will
be the assigned value.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enums’ member can have two kind of value,one is &lt;strong&gt;hasValue&lt;/strong&gt; (the value is &lt;strong&gt;&lt;em&gt;herent&lt;/em&gt;&lt;/strong&gt;),the other is &lt;strong&gt;rawValue&lt;/strong&gt; (the value is  &lt;strong&gt;&lt;em&gt;optional&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Planets{
    case Mercury  //only have &quot;hashValue&quot;,hashValue=0
    case Venus
    case Earth
    case Mars
    case Jupiter
    case Saturn
    case Uranus
    case Neptune
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enums can come prepopulated with raw values, which are required to be of &lt;strong&gt;the same type&lt;/strong&gt;. The raw values can be &lt;strong&gt;string&lt;/strong&gt;, &lt;strong&gt;character&lt;/strong&gt;, &lt;strong&gt;integer&lt;/strong&gt;, or &lt;strong&gt;floating&lt;/strong&gt;-point values.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Devices: String {
       case iPod = &quot;iPod&quot;  //the member now have two values,one is &quot;hashValue&quot;-0,the other is &quot;rawValue&quot;-&quot;iPod&quot;
       case iPhone = &quot;iPhone&quot;
       case iPad = &quot;iPad&quot;
   }
print(&quot;We are using an &quot; + Devices.iPad.rawValue)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If integers are used for the raw values of an enum, we do not have to assign a value to each member. If no value is present, the raw values will be auto-incremented.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Planets: Int  {
       case Mercury = 1   //hasValue=0,rawValue=1
       case Venus   //hashValue=1,rawValue=2
       case Earth
       case Mars
       case Jupiter
       case Saturn
       case Uranus
       case Neptune
   }
print(&quot;Earth is planet number \(Planets.Earth.rawValue)&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;enums can also have &lt;em&gt;associated&lt;/em&gt; values. Associate values allow us to store additional information along with member values. This additional information can vary each time we use the member. It can also be of any type, and the types can be different for each member.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Product {
       case Book(Double, Int, Int)
       case Puzzle(Double, Int)
   }
   var masterSwift = Product.Book(49.99, 2015, 310)
   var worldPuzzle = Product.Puzzle(9.99, 200)
   switchmasterSwift {
   case .Book(let price, let year, let pages):
       print(&quot;Mastering Swift was published in \(year) for the price
           of \(price) and has \(pages) pages&quot;)
   case .Puzzle(let price, let pieces):
       print(&quot;Master Swift is a puzze with \(pieces) and sells for
       \(price)&quot;)
}
   switchworldPuzzle {
   case .Book(let price, let year, let pages):
       print(&quot;World Puzzle was published in \(year) for the price of
       \(price) and has \(pages) pages&quot;)
   case .Puzzle(let price, let pieces):
       print(&quot;World Puzzle is a puzze with \(pieces) and sells for
\(price)&quot;) }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enums have a &lt;strong&gt;shorter&lt;/strong&gt; version.This shorter version lets us de ne multiple members in a single line, separated by &lt;em&gt;commas&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Planets {
       case Mercury, Venus, Earth, Mars, Jupiter
       case Saturn, Uranus, Neptune
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once the enum variable type is inferred or defined, we can then assign a new value without the enum pre x, as shown here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;planetWeLiveOn = .Mars
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can match an enum value using the traditional equals (==) operator or use a switch statement.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Using the traditional == operator
   if planetWeLiveOn == .Earth {
       print(&quot;Earth it is&quot;)
   }
   // Using the switch statement
   switch planetWeLiveOn {
   case .Mercury:
       print(&quot;We live on Mercury, it is very hot!&quot;)
   case .Venus:
       print(&quot;We live on Venus, it is very hot!&quot;)
   case .Earth:
       print(&quot;We live on Earth, just right&quot;)
   case .Mars:
       print(&quot;We live on Mars, a little cold&quot;)
   default:
       print(&quot;Where do we live?&quot;)
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Swift Learning Notes</title>
   <link href="http://nintymiles.github.io/2016/05/02/swift-notes/"/>
   <updated>2016-05-02T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/02/swift-notes</id>
   <content type="html">&lt;h1 id=&quot;swift-learning-notes&quot;&gt;Swift Learning Notes&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift can be thought of as Objective-C reimagined using modern concepts and safe programming patterns. In Apple’s own words, Swift is like Objective-C without
the C. Chris Lattner, the creator of Swift, said Swift took language ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. At WWDC 2014, Apple really stressed that Swift was safe by default. Swift was designed to eliminate many common programming errors, making applications more secure and less prone to bugs. Swift 2 added two additional core features to the language—availability and error handling—which are designed to make it even easier to write safe code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;getting-started-with-playgrounds&quot;&gt;Getting started with Playgrounds&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Playgrounds are interactive work environments that let us write code and see
the results immediately.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-does-playgournds-open-the-debug-area&quot;&gt;How does Playgournds open the debug area&lt;/h2&gt;

&lt;p&gt;You can open it manually by pressing the shift + command + Y keys together. The debug area is so userful.&lt;/p&gt;

&lt;h2 id=&quot;swfit-language-syntax&quot;&gt;Swfit Language Syntax&lt;/h2&gt;

&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;p&gt;Writing comments in Swift code is a little different from writing comments in Objective-C code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Double slash \\&lt;/strong&gt; for single line comments
&lt;strong&gt;/* and */&lt;/strong&gt; for multi line comments&lt;/p&gt;

&lt;p&gt;What has changed is how we document the parameters and the return value. To document any parameter, we use the :parm:  eld, and for the return value, we use the :return:  eld.&lt;/p&gt;

&lt;h3 id=&quot;semicolons&quot;&gt;Semicolons&lt;/h3&gt;
&lt;p&gt;The semicolons are optional in Swift;&lt;/p&gt;

&lt;h3 id=&quot;parentheses&quot;&gt;Parentheses&lt;/h3&gt;
&lt;p&gt;The parentheses around conditional statements are optional&lt;/p&gt;

&lt;h3 id=&quot;curly-braces&quot;&gt;Curly Braces&lt;/h3&gt;
&lt;p&gt;The the curly bracket is required after statements&lt;/p&gt;

&lt;h3 id=&quot;an-assignment-operator-does-not-return-a-value&quot;&gt;An assignment operator does not return a value&lt;/h3&gt;
&lt;p&gt;In Swift, this statement is not valid. Using an assignment operator (=) in a conditional statement (if and while) will throw an error.&lt;/p&gt;

&lt;h3 id=&quot;spaces-are-optional-in-conditional-and-assignment-statements&quot;&gt;Spaces are optional in conditional and assignment statements&lt;/h3&gt;
&lt;p&gt;For both conditional (if and while) and assignment (=) statements, the white spaces are optional.&lt;/p&gt;

&lt;h3 id=&quot;powerful-print-function&quot;&gt;Powerful Print() function&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Official Definition:Writes the textual representations of items, separated by separator and terminated by terminator, into the standard output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The textual representations are obtained for each item via the expression String(item).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prior to Swift 2, we had two separate print functions: print() and println(). Now both of these functions have been combined into the single print() function.&lt;/p&gt;

&lt;p&gt;There are two ways to use print() function:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can include the value of variables and/or constants using a special sequence of characters, \( )&lt;/li&gt;
  &lt;li&gt;by separating the values within the print() function with commas&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-swifty&quot;&gt;var name = &quot;Jon&quot;
var language = &quot;Swift&quot;
var message1 = &quot; Welcome to the wonderful world of &quot;
var message2 = &quot;\(name) Welcome to the wonderful world of \(language)!&quot;

print(name, message1, language, &quot;!&quot;)
print(message2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The usage for &lt;strong&gt;seperator&lt;/strong&gt; and &lt;strong&gt;terminator&lt;/strong&gt; parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-swifty&quot;&gt;var name1 = &quot;Jon&quot;
var name2 = &quot;Kim&quot;
var name3 = &quot;Kailey&quot;
var name4 = &quot;Kara&quot;
print(name1, name2, name3, name4, separator:&quot;, &quot;,terminator:&quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The usage for &lt;strong&gt;toStream&lt;/strong&gt; parameter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name1 = &quot;Jon&quot;
var name2 = &quot;Kim&quot;
var name3 = &quot;Kailey&quot;
var name4 = &quot;Kara&quot;
var line = &quot;&quot;

print(name1, name2, name3, name4, separator:&quot;, &quot;,terminator:&quot;&quot;, toStream:&amp;amp;line)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;### Strings and Characters&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;em&gt;string&lt;/em&gt; is a series of characters&lt;/li&gt;
  &lt;li&gt;A string is an ordered collection of characters, such as Hello or Swift.&lt;/li&gt;
  &lt;li&gt;Swift has the &lt;strong&gt;&lt;em&gt;String&lt;/em&gt;&lt;/strong&gt; type to represent strings&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;String&lt;/em&gt; can be accessed in various way,including as a collection of &lt;em&gt;Character&lt;/em&gt; values&lt;/li&gt;
  &lt;li&gt;Swift’s &lt;em&gt;String&lt;/em&gt; and &lt;em&gt;Character&lt;/em&gt; types privode a fast,Unicode-compliant way to work with text in your code,Swift’s &lt;em&gt;String&lt;/em&gt; type is a fast,modern string implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Swift’s String type is bridged with Foundation’s NSString class. If you are working with the Foundation framework in Cocoa, the entire NSString API is available to call on any String value you create when type cast to NSString, as described in AnyObject. You can also use a String value with any API that requires an NSString instance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;string-literals&quot;&gt;String Literals&lt;/h4&gt;

&lt;p&gt;a string iteral is a fixed sequence of textual characters that must be surrounded by a pair of &lt;em&gt;double quotes&lt;/em&gt; (&lt;strong&gt;”“&lt;/strong&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Use a string literal as an initial value for a constant or variable:

let someString = &quot;Some string literal value&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;initializing-an-empty-string&quot;&gt;Initializing an Empty String&lt;/h4&gt;
&lt;p&gt;Intitialize syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var emptyString = &quot;&quot; // empty string literal
var anotherEmptyString = String() // initializer syntax
// these two strings are both empty, and are equivalent to each other
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How to decide whether a &lt;strong&gt;String&lt;/strong&gt; is empty:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if emptyString.isEmpty {
print(&quot;Nothing to see here&quot;)
}
// Prints &quot;Nothing to see here&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;constants-and-variables&quot;&gt;Constants and Variables&lt;/h4&gt;
&lt;p&gt;Constants and variables associate an identi er (such as myName or currentTemperature) with a value of a particular type (such as String or Int), where the identi er can be used to retrieve the value
-  a variable can be updated or changed
-  a constant cannot be changed once a value is assigned to it&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The use of constants is encouraged in Swift. If we do not expect or want the value to change, we should declare it as a constant. This adds a very important safety constraint to our code that ensures that the value never changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can use almost any character in the identi er of a variable or constant (even Unicode characters); however, there are a few rules that you must follow:
- An identifier must not contain any whitespace
- An identifier must not contain any mathematical symbols
- An identifier must not contain any arrows
- An identifier must not contain private use or invalid Unicode characters
- An identifier must not contain line- or box-drawing characters
- An identifier must not start with a number, but they can contain numbers
- If you use a Swift keyword as an identifier, surround it with back ticks&lt;/p&gt;

&lt;h4 id=&quot;type-safety&quot;&gt;Type safety&lt;/h4&gt;
&lt;p&gt;Swift is a type-safe language. In a type-safe language, we are required to be clear
on the types of values we store in a variable.&lt;/p&gt;

&lt;h4 id=&quot;numberic-types&quot;&gt;Numberic types&lt;/h4&gt;
&lt;p&gt;Swift contains many of the standard numeric types that are suitable for storing various integer and  oating-point values.&lt;/p&gt;

&lt;h4 id=&quot;swift-repl&quot;&gt;Swift REPL&lt;/h4&gt;
&lt;p&gt;You can set up and run a REPL — read, eval, print, loop — in order to write interactive Swift code in the command line. To enable this capability, open the Terminal app from your /Applications/Utilities folder and type &lt;em&gt;xcrun swift&lt;/em&gt; (or &lt;em&gt;lldb –repl&lt;/em&gt;) at the command prompt and press return.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Swift概要2（Swift Overview 2）</title>
   <link href="http://nintymiles.github.io/2016/05/01/swift-overview-2/"/>
   <updated>2016-05-01T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/01/swift-overview-2</id>
   <content type="html">&lt;h1 id=&quot;swift-overview-2&quot;&gt;Swift Overview 2&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift can be thought of as Objective-C reimagined using modern concepts and safe programming patterns. In Apple’s own words, Swift is like Objective-C without
the C. Chris Lattner, the creator of Swift, said Swift took language ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. At WWDC 2014, Apple really stressed that Swift was safe by default. Swift was designed to eliminate many common programming errors, making applications more secure and less prone to bugs. Swift 2 added two additional core features to the language—availability and error handling—which are designed to make it even easier to write safe code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;comparison-operators&quot;&gt;比较操作符 （Comparison Operators)&lt;/h2&gt;

&lt;p&gt;Swift中的比较操作符用于执行简单的数学操作，比如比较数字和值。常用的操作符有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;     大于（Greater Than）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;     小于（Less Than）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;==&lt;/strong&gt;    等于（Equal To）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;gt;=&lt;/strong&gt;    大于等于（Greater Than or Equal To ）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt;    和（AND）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;||&lt;/strong&gt;    或（OR）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;string-interpolation&quot;&gt;字符插入 （String Interpolation）&lt;/h2&gt;

&lt;p&gt;将String输出到控制台意义重大^_^,如何在print语句中将变量组合为String或者合适的值将更有价值。在Swift中，这种操作称为String Interpolation。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sally has &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apples&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; apples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看到上面的例子吗？使用格式：&lt;strong&gt;\(variable name)&lt;/strong&gt;，就可以将任意变量的值转换为String。是不是很容易。在括号中甚至可以进行数学操作，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sally has &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; apples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ifelse-ifelse-statements&quot;&gt;If/else语句 (If/else statements)&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batmanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batmanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;while-while-loops&quot;&gt;While循环 （While Loops）&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;secondsLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondsLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondsLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;secondsLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Blast off!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;breakcontinue&quot;&gt;Break和Continue语句&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fantasLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You have &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Cokes left.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fantasLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You stop drinking Cokes.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Swift概要（Swift Overview）</title>
   <link href="http://nintymiles.github.io/2016/04/28/swift-overview/"/>
   <updated>2016-04-28T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/28/swift-overview</id>
   <content type="html">&lt;h1 id=&quot;swift-overview&quot;&gt;Swift Overview&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift是一门新语言.Swift在设计时结合了C和ObjectiveC的许多特性，但又不受C的各种限制，Swift采用了安全的编程模型并且添加了许多新特性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift采用了ObjectiveC的命名参数以及动态对象模型，从而可以无缝对接到现有的Cocoa框架。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift使用自动引用计数（Automatic Reference Counting, ARC）来简化内存管理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--开头 --&gt;
&lt;p&gt;通常来说，编程语言教程中的第一个程序应该在屏幕上打印“Hello, world”。在 Swift 中，可以用一行代码实现：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;print(“Hello, world!”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 Swift 中，这行代码就是一个完整的程序。你不需要为了输入输出或者字符串处理导入一个单独的库。全局作用域中的代码会被自动当做程序的入口点，所以你也不需要main()函数。&lt;/p&gt;

&lt;p&gt;你同样不需要在每个语句结尾写上分号。&lt;/p&gt;

&lt;h2 id=&quot;variable&quot;&gt;变量（Variable）声明&lt;/h2&gt;

&lt;p&gt;变量声明语法：
&amp;gt;var 你的变量名称:数据类型=变量初始值&lt;/p&gt;

&lt;p&gt;变量要符合下面的原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;你的变量名称&lt;/strong&gt;：你可以用任何字符命名变量，比如age和🐶🐱&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;变量类型&lt;/strong&gt;：变量类型，比如Int和String,更多类型会在后面列出&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;变量初始值&lt;/strong&gt;：你要赋给变量的初始值，根据类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;types&quot;&gt;数据类型（Types）&lt;/h2&gt;

&lt;p&gt;Swift提供下面的基础数据类型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Int&lt;/strong&gt;：整数&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Double&lt;/strong&gt;：十进位数&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt;：true,false&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;：string (letters and words)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;constants&quot;&gt;常量 （Constants）&lt;/h2&gt;

&lt;p&gt;特定类型的变量称为常量，常量是指你只需要决定一次，但是可以使用很多次的特殊变量。&lt;/p&gt;

&lt;p&gt;使用关键字&lt;strong&gt;let&lt;/strong&gt;来声明常量。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;life&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canTouchThis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;captain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Kirk&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果尝试给常量赋值，会得到编译器错误。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;inferred-typing&quot;&gt;推断类型（Inferred Typing）&lt;/h2&gt;

&lt;p&gt;Swift提供一种新特性称之为&lt;strong&gt;推断类型（Inferred Typing）&lt;/strong&gt;。这意味着如果在定义和初始化变量时&lt;strong&gt;提供足够的信息&lt;/strong&gt;，Swift可以自动预测数据类型，从而不需要每次都输入类型。
在这个特性的支持下，之前的变量声明语法可以变为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;你的变量名称&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;变量初始值&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;你的常量名称&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;常量初始值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意描述推断类型的“&lt;strong&gt;提供足够的信息&lt;/strong&gt;”，如果 “var intNumber=7”没有问题，但是”var doubleNumber=7“则可能达不到你的类型预期，doubleNumber会被默认推断为Int类型，提供足够的信息则需要”var doubleNumber=7.0“。&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>A kid portrait copying painting</title>
   <link href="http://nintymiles.github.io/2016/04/23/kid-portrait-copying-painting/"/>
   <updated>2016-04-23T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/23/kid-portrait-copying-painting</id>
   <content type="html">&lt;h5 id=&quot;willies-kid-portrait-copying-painting-in-class&quot;&gt;Willie’s kid portrait copying painting in class&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/kid_portrait_copying_painting.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>美图</title>
   <link href="http://nintymiles.github.io/2016/04/21/ancient-drawing/"/>
   <updated>2016-04-21T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/21/ancient-drawing</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;美图偶拾&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;网络时代，一切皆可记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/ancient_drawing/paint2.png&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/ancient_drawing/paint4.png&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/ancient_drawing/paint3.png&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/ancient_drawing/paint1.png&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>旧游照片-贵得（2）</title>
   <link href="http://nintymiles.github.io/2016/04/16/past_tourism_guide_mountains/"/>
   <updated>2016-04-16T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/16/past_tourism_guide_mountains</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;旅程第二段：贵得(2)&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;贵得及周边。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/2-guide_mountains.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Willie's Blue and White Porcelain</title>
   <link href="http://nintymiles.github.io/2016/04/13/willie-blue-and-white-porcelain/"/>
   <updated>2016-04-13T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/13/willie-blue-and-white-porcelain</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;青花瓷&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just records the grown up tracks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/blueandwhiteporcelain.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>This Spring Flowers</title>
   <link href="http://nintymiles.github.io/2016/04/10/spring-flowers/"/>
   <updated>2016-04-10T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/10/spring-flowers</id>
   <content type="html">&lt;h5 id=&quot;so-many-kinds-of-flowers-blossom&quot;&gt;So many kinds of flowers blossom.&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;I was collecting all kinds of flowers this spring,so the below shows are.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;the-flowers-people-wont-see&quot;&gt;The flowers people wont see&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/flowers_invisible_1000.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;peach-blossom&quot;&gt;peach blossom&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/peach_flowers1.jpg&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/springflowers2016/peach_flower2.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;tulip-blossom&quot;&gt;tulip blossom&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/tulip_flowers.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;cherry-apple-blossom&quot;&gt;cherry-apple blossom&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/cherry_apple_flowers.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;so-many-kinds-of-other-flowers&quot;&gt;so many kinds of other flowers&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/all_kinds_of_flowers.jpg&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/springflowers2016/all_kinds_of_flowers2.jpg&quot; alt=&quot;image description&quot; /&gt;
—&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Ultramans in Willie's painting</title>
   <link href="http://nintymiles.github.io/2016/04/06/ultraman-in-willie-eyes/"/>
   <updated>2016-04-06T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/06/ultraman-in-willie-eyes</id>
   <content type="html">&lt;h5 id=&quot;the-kids-always-have-extraordinary-imagination&quot;&gt;The kids always have extraordinary imagination.&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/ultranman-drawing0406.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>同事去西藏，让我想起了故纸堆中的几千张旧日旅行照片</title>
   <link href="http://nintymiles.github.io/2016/04/04/past_tourism/"/>
   <updated>2016-04-04T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/04/past_tourism</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;重拾一段旅程&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;不是因为西藏，而是山川壮美。不是炫耀，而是自然撼动人心。权力的欲望真的可以永无止境的随意地更改自然的面貌吗？！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;section-1&quot;&gt;旅程第一段：西宁至贵得(1)&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;以苍鹰和雪山开头。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/1-hawk_snowmountain.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;初见大山，已然震撼，尚未离开西宁。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/1-xining_moutains.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;路遇牧民剪羊毛，只是这高原羊有些威严气象。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/1-goat_highlander.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;高原草甸中的点缀。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/1-flowers_xining.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>踏着车流，一路来到100公里外的一条河</title>
   <link href="http://nintymiles.github.io/2016/04/03/a-river-beyond-100-km/"/>
   <updated>2016-04-03T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/03/a-river-beyond-100-km</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;100公里外的一条河&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;岁清明，桃柳当候，岸草遍矣。踏青于沿河城永定河。
&lt;img src=&quot;/asset/ariver_beyond-100km-1000.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>自我的闭关。</title>
   <link href="http://nintymiles.github.io/2016/04/02/shock-by-deep-thought/"/>
   <updated>2016-04-02T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/02/shock-by-deep-thought</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;深深的寒意&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;被动也好，主动也罢。当这么些已经觉醒自我的人在这个时点统一闭关。这本身就让人不寒而栗。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;section-1&quot;&gt;摘记自一博客&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;我很诧异，李马的爱国情怀可以质疑，李马的智商和能力应该不会太低。况且，当所有豪门都在走路的时候，一些朋友难道就不能怀疑一次自己的智商吗？&lt;/li&gt;
  &lt;li&gt;太扯淡！金融能挽救金融地产，就如同你能提着自己飞翔。老实一点好吗？&lt;/li&gt;
  &lt;li&gt;脱锚已经一年半载，寂静的滑翔中并无堕落的感觉。在厚重的惯性中，领导还在展示各种优美的动作。可惜，没有动力的惯性无法支持结构再平衡。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>影分身术</title>
   <link href="http://nintymiles.github.io/2016/04/02/playing_in_maze_house/"/>
   <updated>2016-04-02T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/02/playing_in_maze_house</id>
   <content type="html">&lt;h5 id=&quot;willie-is-playing-in-the-maze-house&quot;&gt;Willie is playing in the maze house&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;影分身术&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/maze_20160402.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>摘记</title>
   <link href="http://nintymiles.github.io/2016/04/01/reading-notes/"/>
   <updated>2016-04-01T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/01/reading-notes</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;国外评级公司的评级降低会产生的影响：&lt;/h5&gt;
&lt;p&gt;标普在穆迪之后调低了中国评级至AA-，这意味着中国经济同时不被两大评级机构看好，已经融入世界经济的中国市场，如果在面临海外借贷时，将会面临更高成本。同时，希望海外资金进入中国市场，承接高收益的中国债券，成为一件高风险的事情。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;section-1&quot;&gt;下面一段摘录揭示自我的形成：&lt;/h5&gt;
&lt;p&gt;人从小自他人的语言中构建自我,来自父母、其他家庭成员、学校老师、其他相关的人、团队、组织、国家、宗教。每个人在这些环境中构建内心深处的我，并赋予定义，以此为生。&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>昨日记</title>
   <link href="http://nintymiles.github.io/2016/04/01/everyday-thoughts/"/>
   <updated>2016-04-01T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/01/everyday thoughts</id>
   <content type="html">&lt;h2 id=&quot;willie-said-yesterday&quot;&gt;Willie Said Yesterday：&lt;/h2&gt;
&lt;p&gt;我昨天在小广场看见了一个恐龙头化石！&lt;/p&gt;

&lt;h2 id=&quot;sean-read-something-impressive-yesterday&quot;&gt;Sean read something impressive yesterday：&lt;/h2&gt;
&lt;p&gt;“Where a religion was bound up with the government of an empire, political motives did much to tansform its primitive features.” –Bertrand Russel&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;凡事有果必有因。&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Willie's Painting in Kindergarten</title>
   <link href="http://nintymiles.github.io/2016/04/01/class-painting/"/>
   <updated>2016-04-01T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/01/class-painting</id>
   <content type="html">&lt;h5 id=&quot;willie-naming-it&quot;&gt;Willie naming it：&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;《葡萄与蜗牛》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/xuan_painting0401.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>九十里</title>
   <link href="http://nintymiles.github.io/2016/03/31/nintymiles-kickoff/"/>
   <updated>2016-03-31T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/03/31/nintymiles-kickoff</id>
   <content type="html">&lt;p&gt;万物生长，水木自亲。
&lt;img src=&quot;/asset/springflower_160331.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;built-on-jekyll-by-seanren&quot;&gt;Built on Jekyll by SeanRen&lt;/h3&gt;

</content>
 </entry>
 

</feed>
