<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>九十里</title>
 <link href="http://nintymiles.github.io/atom.xml" rel="self"/>
 <link href="http://nintymiles.github.io/"/>
 <updated>2016-05-23T16:22:51+08:00</updated>
 <id>http://nintymiles.github.io</id>
 <author>
   <name>SeanRen</name>
   <email>nintymiles@icloud.com</email>
 </author>

 
 <entry>
   <title>Swift Learning Notes  - Closure</title>
   <link href="http://nintymiles.github.io/2016/05/21/swift-notes/"/>
   <updated>2016-05-21T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/21/swift-notes </id>
   <content type="html">&lt;h2 id=&quot;closure-definition&quot;&gt;Closure Definition&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Closures are &lt;strong&gt;self-contained blocks of functionality&lt;/strong&gt; that can be &lt;strong&gt;passed around&lt;/strong&gt; and &lt;strong&gt;used&lt;/strong&gt; in your code.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Closures are similar to blocks in C and Objective C&lt;/li&gt;
  &lt;li&gt;Closures can &lt;strong&gt;capture&lt;/strong&gt; and &lt;strong&gt;store&lt;/strong&gt; &lt;strong&gt;references&lt;/strong&gt; to &lt;strong&gt;&lt;em&gt;any&lt;/em&gt;&lt;/strong&gt; constants and variables &lt;em&gt;from the context in which they are defined&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Global and nested functions are special cases of closures,not all kinds of functions.
    &lt;ul&gt;
      &lt;li&gt;Global functions are closures that have a name and do not capture any values&lt;/li&gt;
      &lt;li&gt;Nested functions are closures that have a name and can capture values from their enclosing function&lt;/li&gt;
      &lt;li&gt;Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Closure syntax optimisation&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Inferring parameter and return value types from context Implicit returns from single-expression closures (&lt;em&gt;two key point here&lt;/em&gt;)&lt;/li&gt;
      &lt;li&gt;Shorthand argument name&lt;/li&gt;
      &lt;li&gt;Trailing closure syntax&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Closure syntax expression&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(parameters)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;necessary&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Code implementation block must be started on a new line,even in optimization style。otherwise it will raise error in playground.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let reversed=names.sort({(s1: String,s2: String) -&amp;gt; Bool in
        return s1 &amp;gt; s2 })

let revesed2=names.sort({(s1,s2) in
        return s1 &amp;gt; s2});

let reversed3=names.sort({s1,s2 in
        s1 &amp;gt; s2})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Collection classes’ sort(_:) method_will produce a new collection that has the same size and type as the old one. the original collection is not modified by the sort(_:) method._&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;function-parameter-names&quot;&gt;Function Parameter Names&lt;/h2&gt;
&lt;p&gt;Function has two kind of parameter name,one is external parameter name,the other is local parameter name.
- external parameter name is used to label arguments passed to a function call
- local parameter name  is used in the implementation of the function&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Surfing notes 5.21</title>
   <link href="http://nintymiles.github.io/2016/05/21/surfing_notes/"/>
   <updated>2016-05-21T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/21/surfing_notes</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;杠杆到了非去不可的时候-如松&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;权威人士发言通篇都是“杠杆”&lt;/li&gt;
  &lt;li&gt;认为杠杆到了非去不可的时候
    &lt;ul&gt;
      &lt;li&gt;大宗下降到一定程度后，进口就会增长，会推进贸易逆差。&lt;/li&gt;
      &lt;li&gt;资本外流加上贸易逆差。如果放任杠杆，则资产价格和生产成本都会飙升，那么进口增加会更快，导致贸易逆差更大。&lt;/li&gt;
      &lt;li&gt;后果是“甚至让储蓄泡汤”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Reading notes 5.18-5.20</title>
   <link href="http://nintymiles.github.io/2016/05/18/reading_notes/"/>
   <updated>2016-05-18T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/18/reading_notes</id>
   <content type="html">&lt;h2 id=&quot;wild-and-expressive-language&quot;&gt;Wild and expressive language.&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;… I was sitting in my office,behind a desk fit for a dictator,in a chair as big as  a throne …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;google-defines-post-smart-phone-era&quot;&gt;Google defines “post smart phone era”&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Google彻底展现出其争霸“后智能手机”的野心——成为一个超级智能平台。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;人工智能平台 Google Home&lt;br /&gt;
 &lt;em&gt;Google Assistant被视作亚马逊 Alexa、苹果Siri以及微软Cortana的竞争产品。&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;VR平台——Daydream&lt;/li&gt;
  &lt;li&gt;汽车驾驶平台——Google Auto&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section&quot;&gt;&lt;em&gt;关于几条新闻的一点看法&lt;/em&gt; - 秦慕楚&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;自透漏的阅读习惯&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;晚睡早起，阅读在晚上，清晨花一个小时浏览网站。如有交易计划或意图，则不看新闻，免于被即时情绪打扰。微信微博QQ等保持隔离状态，认为信息真假难于甄别。认为在信息免费及信息爆炸的时代，人更不自由，更无自我。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;金融危机后，新闻的实时性、透明性、公开性、公正性被破坏殆尽&lt;/li&gt;
  &lt;li&gt;对一些新闻的甄别
    &lt;ol&gt;
      &lt;li&gt;欧盟不承认市场经济地位，对经济影响很大，接着会有各种反倾向和辅助手段&lt;/li&gt;
      &lt;li&gt;委国的援助又是白送，出于老板的面子或者灰色需求&lt;/li&gt;
      &lt;li&gt;任正非公开评论房地产，说明华为类实业企业已受困于房地产，至于存亡之地。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;&lt;em&gt;持续加息预期的大门已经打开_股事&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;认为今年9月左右，FED将开启持续加息的进程，很多地方的泡沫将会破灭，各种危机不断。&lt;/p&gt;

&lt;h2 id=&quot;taiwans-first-female-leader-swore-in&quot;&gt;Taiwan’s first female leader swore in&lt;/h2&gt;

&lt;h2 id=&quot;caishenkun&quot;&gt;Caishenkun的博客写的不错，比较切中实事&lt;/h2&gt;

&lt;h2 id=&quot;section-2&quot;&gt;关于债务违约或发债难的微博160520-日高天凉&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;过剩产能不产生利润，企业靠银行“融资”存活&lt;/li&gt;
  &lt;li&gt;银行如果停贷，股市目前情形无法融资，债市情形无法发债，只能倒闭，且会连锁倒闭&lt;/li&gt;
  &lt;li&gt;认为过剩产能企业是对资本的侮辱，越早倒闭越好&lt;/li&gt;
  &lt;li&gt;认为汇率失守时，汇率和利息只会保汇率，然后如俄一般狂拉利率&lt;/li&gt;
  &lt;li&gt;利率提升后银行会漏出白花花的屁股（坏账），西门失守，东门守住也没意义&lt;/li&gt;
  &lt;li&gt;汇率不保后，会如委国&lt;/li&gt;
  &lt;li&gt;博主应该对奥派行为经济学等有较深认识，直击本质&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Willie's recent drawing collection</title>
   <link href="http://nintymiles.github.io/2016/05/15/willie-drawing-collection/"/>
   <updated>2016-05-15T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/15/willie-drawing-collection</id>
   <content type="html">&lt;h2 id=&quot;handmade-cutout&quot;&gt;Handmade cutout.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/handmade_cutout.png&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;willie-self-made-calabash-7-brothers&quot;&gt;Willie self-made calabash 7 brothers.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/Calabash_7_brothers.png&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;car-in-driving&quot;&gt;Car in driving.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/driving_car_201605.png&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Swift Learning Notes 2 - Optional and Enumeration</title>
   <link href="http://nintymiles.github.io/2016/05/11/swift-notes/"/>
   <updated>2016-05-11T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/11/swift-notes</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Swift can be thought of as Objective-C reimagined using modern concepts and safe programming patterns. In Apple’s own words, Swift is like Objective-C without
the C. Chris Lattner, the creator of Swift, said Swift took language ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. At WWDC 2014, Apple really stressed that Swift was safe by default. Swift was designed to eliminate many common programming errors, making applications more secure and less prone to bugs. Swift 2 added two additional core features to the language—availability and error handling—which are designed to make it even easier to write safe code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;optional-variables&quot;&gt;Optional variables&lt;/h2&gt;
&lt;p&gt;In Swift,normally,the variables are considered to be nonoptional. an optional variable is a variable that we are able to assign nil (no value) to. &lt;strong&gt;Optional variables and constants are defined using &lt;em&gt;?&lt;/em&gt; (question mark).&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Optional variables were added to the Swift language as a safety feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use force unwrapping, we must  rst make sure that the optional has a non-nil value and then we can use the explanation point to access that value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name: String?
Name = &quot;Jon&quot;
if name != nil {
    var newString = &quot;Hello &quot; + name!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We use &lt;strong&gt;optional binding&lt;/strong&gt; to check whether an optional variable or constant has a non-nil value, and, if so, assign that value to a temporary variable. For optional binding, we use the &lt;strong&gt;if-let&lt;/strong&gt; or &lt;strong&gt;if-var&lt;/strong&gt; keywords together. If we use if-let, the &lt;strong&gt;&lt;em&gt;temporary&lt;/em&gt;&lt;/strong&gt; value is a constant and cannot be changed, while the if-var keywords puts the temporary value into a variable that allows us to change the value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if let temp = myOptional {
    print(temp)
    print(&quot;Can not use temp outside of the if bracket&quot;)
} else {
    print(&quot;myOptional was nil&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can also test multiple optional variables in one line. We do this by separating each optional check with a comma. The following example shows how to do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   if let myOptional = myOptional, myOptional2 = myOptional2,
   myOptional3 = myOptional3 {
     // only reach this if all three optionals
     // have non-nil values
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Within the optional binding zone,value type variable’s changing is &lt;strong&gt;independent&lt;/strong&gt;.so it doesn’t affect the value of the outter variable,even the variable is declared outter the scope. But reference type variable’s changing is &lt;strong&gt;relative&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Optional chaining&lt;/strong&gt; allows us to call properties, methods, and subscripts on an optional that might be nil. If any of the chained values return nil, the return value will be nil.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var s = car?.tires?.tireSize
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;enumerations&quot;&gt;Enumerations&lt;/h2&gt;
&lt;p&gt;Enumerations (otherwise known as enums) are a &lt;strong&gt;special&lt;/strong&gt; data type that enables us
to &lt;strong&gt;group&lt;/strong&gt; related types together and use them in a &lt;strong&gt;type safe&lt;/strong&gt; manner.&lt;/p&gt;

&lt;p&gt;enums in Swift are &lt;strong&gt;not tied to integer values&lt;/strong&gt;. We can define an enum with a type (string, character, integer, or floating-point) and then it’s actual value (known as the raw value) will
be the assigned value.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enums’ member can have two kind of value,one is &lt;strong&gt;hasValue&lt;/strong&gt; (the value is &lt;strong&gt;&lt;em&gt;herent&lt;/em&gt;&lt;/strong&gt;),the other is &lt;strong&gt;rawValue&lt;/strong&gt; (the value is  &lt;strong&gt;&lt;em&gt;optional&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Planets{
    case Mercury  //only have &quot;hashValue&quot;,hashValue=0
    case Venus
    case Earth
    case Mars
    case Jupiter
    case Saturn
    case Uranus
    case Neptune
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enums can come prepopulated with raw values, which are required to be of &lt;strong&gt;the same type&lt;/strong&gt;. The raw values can be &lt;strong&gt;string&lt;/strong&gt;, &lt;strong&gt;character&lt;/strong&gt;, &lt;strong&gt;integer&lt;/strong&gt;, or &lt;strong&gt;floating&lt;/strong&gt;-point values.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Devices: String {
       case iPod = &quot;iPod&quot;  //the member now have two values,one is &quot;hashValue&quot;-0,the other is &quot;rawValue&quot;-&quot;iPod&quot;
       case iPhone = &quot;iPhone&quot;
       case iPad = &quot;iPad&quot;
   }
print(&quot;We are using an &quot; + Devices.iPad.rawValue)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If integers are used for the raw values of an enum, we do not have to assign a value to each member. If no value is present, the raw values will be auto-incremented.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Planets: Int  {
       case Mercury = 1   //hasValue=0,rawValue=1
       case Venus   //hashValue=1,rawValue=2
       case Earth
       case Mars
       case Jupiter
       case Saturn
       case Uranus
       case Neptune
   }
print(&quot;Earth is planet number \(Planets.Earth.rawValue)&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;enums can also have &lt;em&gt;associated&lt;/em&gt; values. Associate values allow us to store additional information along with member values. This additional information can vary each time we use the member. It can also be of any type, and the types can be different for each member.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Product {
       case Book(Double, Int, Int)
       case Puzzle(Double, Int)
   }
   var masterSwift = Product.Book(49.99, 2015, 310)
   var worldPuzzle = Product.Puzzle(9.99, 200)
   switchmasterSwift {
   case .Book(let price, let year, let pages):
       print(&quot;Mastering Swift was published in \(year) for the price
           of \(price) and has \(pages) pages&quot;)
   case .Puzzle(let price, let pieces):
       print(&quot;Master Swift is a puzze with \(pieces) and sells for
       \(price)&quot;)
}
   switchworldPuzzle {
   case .Book(let price, let year, let pages):
       print(&quot;World Puzzle was published in \(year) for the price of
       \(price) and has \(pages) pages&quot;)
   case .Puzzle(let price, let pieces):
       print(&quot;World Puzzle is a puzze with \(pieces) and sells for
\(price)&quot;) }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enums have a &lt;strong&gt;shorter&lt;/strong&gt; version.This shorter version lets us de ne multiple members in a single line, separated by &lt;em&gt;commas&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum Planets {
       case Mercury, Venus, Earth, Mars, Jupiter
       case Saturn, Uranus, Neptune
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once the enum variable type is inferred or defined, we can then assign a new value without the enum pre x, as shown here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;planetWeLiveOn = .Mars
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can match an enum value using the traditional equals (==) operator or use a switch statement.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Using the traditional == operator
   if planetWeLiveOn == .Earth {
       print(&quot;Earth it is&quot;)
   }
   // Using the switch statement
   switch planetWeLiveOn {
   case .Mercury:
       print(&quot;We live on Mercury, it is very hot!&quot;)
   case .Venus:
       print(&quot;We live on Venus, it is very hot!&quot;)
   case .Earth:
       print(&quot;We live on Earth, just right&quot;)
   case .Mars:
       print(&quot;We live on Mars, a little cold&quot;)
   default:
       print(&quot;Where do we live?&quot;)
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Swift Learning Notes</title>
   <link href="http://nintymiles.github.io/2016/05/02/swift-notes/"/>
   <updated>2016-05-02T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/02/swift-notes</id>
   <content type="html">&lt;h1 id=&quot;swift-learning-notes&quot;&gt;Swift Learning Notes&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift can be thought of as Objective-C reimagined using modern concepts and safe programming patterns. In Apple’s own words, Swift is like Objective-C without
the C. Chris Lattner, the creator of Swift, said Swift took language ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. At WWDC 2014, Apple really stressed that Swift was safe by default. Swift was designed to eliminate many common programming errors, making applications more secure and less prone to bugs. Swift 2 added two additional core features to the language—availability and error handling—which are designed to make it even easier to write safe code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;getting-started-with-playgrounds&quot;&gt;Getting started with Playgrounds&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Playgrounds are interactive work environments that let us write code and see
the results immediately.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-does-playgournds-open-the-debug-area&quot;&gt;How does Playgournds open the debug area&lt;/h2&gt;

&lt;p&gt;You can open it manually by pressing the shift + command + Y keys together. The debug area is so userful.&lt;/p&gt;

&lt;h2 id=&quot;swfit-language-syntax&quot;&gt;Swfit Language Syntax&lt;/h2&gt;

&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;

&lt;p&gt;Writing comments in Swift code is a little different from writing comments in Objective-C code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Double slash \\&lt;/strong&gt; for single line comments
&lt;strong&gt;/* and */&lt;/strong&gt; for multi line comments&lt;/p&gt;

&lt;p&gt;What has changed is how we document the parameters and the return value. To document any parameter, we use the :parm:  eld, and for the return value, we use the :return:  eld.&lt;/p&gt;

&lt;h3 id=&quot;semicolons&quot;&gt;Semicolons&lt;/h3&gt;
&lt;p&gt;The semicolons are optional in Swift;&lt;/p&gt;

&lt;h3 id=&quot;parentheses&quot;&gt;Parentheses&lt;/h3&gt;
&lt;p&gt;The parentheses around conditional statements are optional&lt;/p&gt;

&lt;h3 id=&quot;curly-braces&quot;&gt;Curly Braces&lt;/h3&gt;
&lt;p&gt;The the curly bracket is required after statements&lt;/p&gt;

&lt;h3 id=&quot;an-assignment-operator-does-not-return-a-value&quot;&gt;An assignment operator does not return a value&lt;/h3&gt;
&lt;p&gt;In Swift, this statement is not valid. Using an assignment operator (=) in a conditional statement (if and while) will throw an error.&lt;/p&gt;

&lt;h3 id=&quot;spaces-are-optional-in-conditional-and-assignment-statements&quot;&gt;Spaces are optional in conditional and assignment statements&lt;/h3&gt;
&lt;p&gt;For both conditional (if and while) and assignment (=) statements, the white spaces are optional.&lt;/p&gt;

&lt;h3 id=&quot;powerful-print-function&quot;&gt;Powerful Print() function&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Official Definition:Writes the textual representations of items, separated by separator and terminated by terminator, into the standard output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The textual representations are obtained for each item via the expression String(item).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prior to Swift 2, we had two separate print functions: print() and println(). Now both of these functions have been combined into the single print() function.&lt;/p&gt;

&lt;p&gt;There are two ways to use print() function:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can include the value of variables and/or constants using a special sequence of characters, \( )&lt;/li&gt;
  &lt;li&gt;by separating the values within the print() function with commas&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-swifty&quot;&gt;var name = &quot;Jon&quot;
var language = &quot;Swift&quot;
var message1 = &quot; Welcome to the wonderful world of &quot;
var message2 = &quot;\(name) Welcome to the wonderful world of \(language)!&quot;

print(name, message1, language, &quot;!&quot;)
print(message2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The usage for &lt;strong&gt;seperator&lt;/strong&gt; and &lt;strong&gt;terminator&lt;/strong&gt; parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-swifty&quot;&gt;var name1 = &quot;Jon&quot;
var name2 = &quot;Kim&quot;
var name3 = &quot;Kailey&quot;
var name4 = &quot;Kara&quot;
print(name1, name2, name3, name4, separator:&quot;, &quot;,terminator:&quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The usage for &lt;strong&gt;toStream&lt;/strong&gt; parameter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name1 = &quot;Jon&quot;
var name2 = &quot;Kim&quot;
var name3 = &quot;Kailey&quot;
var name4 = &quot;Kara&quot;
var line = &quot;&quot;

print(name1, name2, name3, name4, separator:&quot;, &quot;,terminator:&quot;&quot;, toStream:&amp;amp;line)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;### Strings and Characters&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;em&gt;string&lt;/em&gt; is a series of characters&lt;/li&gt;
  &lt;li&gt;A string is an ordered collection of characters, such as Hello or Swift.&lt;/li&gt;
  &lt;li&gt;Swift has the &lt;strong&gt;&lt;em&gt;String&lt;/em&gt;&lt;/strong&gt; type to represent strings&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;String&lt;/em&gt; can be accessed in various way,including as a collection of &lt;em&gt;Character&lt;/em&gt; values&lt;/li&gt;
  &lt;li&gt;Swift’s &lt;em&gt;String&lt;/em&gt; and &lt;em&gt;Character&lt;/em&gt; types privode a fast,Unicode-compliant way to work with text in your code,Swift’s &lt;em&gt;String&lt;/em&gt; type is a fast,modern string implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Swift’s String type is bridged with Foundation’s NSString class. If you are working with the Foundation framework in Cocoa, the entire NSString API is available to call on any String value you create when type cast to NSString, as described in AnyObject. You can also use a String value with any API that requires an NSString instance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;string-literals&quot;&gt;String Literals&lt;/h4&gt;

&lt;p&gt;a string iteral is a fixed sequence of textual characters that must be surrounded by a pair of &lt;em&gt;double quotes&lt;/em&gt; (&lt;strong&gt;”“&lt;/strong&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Use a string literal as an initial value for a constant or variable:

let someString = &quot;Some string literal value&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;initializing-an-empty-string&quot;&gt;Initializing an Empty String&lt;/h4&gt;
&lt;p&gt;Intitialize syntax:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var emptyString = &quot;&quot; // empty string literal
var anotherEmptyString = String() // initializer syntax
// these two strings are both empty, and are equivalent to each other
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How to decide whether a &lt;strong&gt;String&lt;/strong&gt; is empty:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if emptyString.isEmpty {
print(&quot;Nothing to see here&quot;)
}
// Prints &quot;Nothing to see here&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;constants-and-variables&quot;&gt;Constants and Variables&lt;/h4&gt;
&lt;p&gt;Constants and variables associate an identi er (such as myName or currentTemperature) with a value of a particular type (such as String or Int), where the identi er can be used to retrieve the value
-  a variable can be updated or changed
-  a constant cannot be changed once a value is assigned to it&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The use of constants is encouraged in Swift. If we do not expect or want the value to change, we should declare it as a constant. This adds a very important safety constraint to our code that ensures that the value never changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can use almost any character in the identi er of a variable or constant (even Unicode characters); however, there are a few rules that you must follow:
- An identifier must not contain any whitespace
- An identifier must not contain any mathematical symbols
- An identifier must not contain any arrows
- An identifier must not contain private use or invalid Unicode characters
- An identifier must not contain line- or box-drawing characters
- An identifier must not start with a number, but they can contain numbers
- If you use a Swift keyword as an identifier, surround it with back ticks&lt;/p&gt;

&lt;h4 id=&quot;type-safety&quot;&gt;Type safety&lt;/h4&gt;
&lt;p&gt;Swift is a type-safe language. In a type-safe language, we are required to be clear
on the types of values we store in a variable.&lt;/p&gt;

&lt;h4 id=&quot;numberic-types&quot;&gt;Numberic types&lt;/h4&gt;
&lt;p&gt;Swift contains many of the standard numeric types that are suitable for storing various integer and  oating-point values.&lt;/p&gt;

&lt;h4 id=&quot;swift-repl&quot;&gt;Swift REPL&lt;/h4&gt;
&lt;p&gt;You can set up and run a REPL — read, eval, print, loop — in order to write interactive Swift code in the command line. To enable this capability, open the Terminal app from your /Applications/Utilities folder and type &lt;em&gt;xcrun swift&lt;/em&gt; (or &lt;em&gt;lldb –repl&lt;/em&gt;) at the command prompt and press return.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Swift概要2（Swift Overview 2）</title>
   <link href="http://nintymiles.github.io/2016/05/01/swift-overview-2/"/>
   <updated>2016-05-01T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/05/01/swift-overview-2</id>
   <content type="html">&lt;h1 id=&quot;swift-overview-2&quot;&gt;Swift Overview 2&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift can be thought of as Objective-C reimagined using modern concepts and safe programming patterns. In Apple’s own words, Swift is like Objective-C without
the C. Chris Lattner, the creator of Swift, said Swift took language ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. At WWDC 2014, Apple really stressed that Swift was safe by default. Swift was designed to eliminate many common programming errors, making applications more secure and less prone to bugs. Swift 2 added two additional core features to the language—availability and error handling—which are designed to make it even easier to write safe code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;comparison-operators&quot;&gt;比较操作符 （Comparison Operators)&lt;/h2&gt;

&lt;p&gt;Swift中的比较操作符用于执行简单的数学操作，比如比较数字和值。常用的操作符有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;     大于（Greater Than）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;     小于（Less Than）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;==&lt;/strong&gt;    等于（Equal To）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;gt;=&lt;/strong&gt;    大于等于（Greater Than or Equal To ）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt;    和（AND）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;||&lt;/strong&gt;    或（OR）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;string-interpolation&quot;&gt;字符插入 （String Interpolation）&lt;/h2&gt;

&lt;p&gt;将String输出到控制台意义重大^_^,如何在print语句中将变量组合为String或者合适的值将更有价值。在Swift中，这种操作称为String Interpolation。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sally has &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apples&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; apples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看到上面的例子吗？使用格式：&lt;strong&gt;\(variable name)&lt;/strong&gt;，就可以将任意变量的值转换为String。是不是很容易。在括号中甚至可以进行数学操作，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sally has &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; apples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ifelse-ifelse-statements&quot;&gt;If/else语句 (If/else statements)&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batmanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batmanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spidermanCoolness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;while-while-loops&quot;&gt;While循环 （While Loops）&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;secondsLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondsLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondsLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;secondsLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondsLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Blast off!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;breakcontinue&quot;&gt;Break和Continue语句&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fantasLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You have &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Cokes left.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cokesLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fantasLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You stop drinking Cokes.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Swift概要（Swift Overview）</title>
   <link href="http://nintymiles.github.io/2016/04/28/swift-overview/"/>
   <updated>2016-04-28T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/28/swift-overview</id>
   <content type="html">&lt;h1 id=&quot;swift-overview&quot;&gt;Swift Overview&lt;/h1&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift是一门新语言.Swift在设计时结合了C和ObjectiveC的许多特性，但又不受C的各种限制，Swift采用了安全的编程模型并且添加了许多新特性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift采用了ObjectiveC的命名参数以及动态对象模型，从而可以无缝对接到现有的Cocoa框架。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;
&lt;blockquote&gt;
  &lt;p&gt;Swift使用自动引用计数（Automatic Reference Counting, ARC）来简化内存管理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--开头 --&gt;
&lt;p&gt;通常来说，编程语言教程中的第一个程序应该在屏幕上打印“Hello, world”。在 Swift 中，可以用一行代码实现：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;print(“Hello, world!”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 Swift 中，这行代码就是一个完整的程序。你不需要为了输入输出或者字符串处理导入一个单独的库。全局作用域中的代码会被自动当做程序的入口点，所以你也不需要main()函数。&lt;/p&gt;

&lt;p&gt;你同样不需要在每个语句结尾写上分号。&lt;/p&gt;

&lt;h2 id=&quot;variable&quot;&gt;变量（Variable）声明&lt;/h2&gt;

&lt;p&gt;变量声明语法：
&amp;gt;var 你的变量名称:数据类型=变量初始值&lt;/p&gt;

&lt;p&gt;变量要符合下面的原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;你的变量名称&lt;/strong&gt;：你可以用任何字符命名变量，比如age和🐶🐱&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;变量类型&lt;/strong&gt;：变量类型，比如Int和String,更多类型会在后面列出&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;变量初始值&lt;/strong&gt;：你要赋给变量的初始值，根据类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;types&quot;&gt;数据类型（Types）&lt;/h2&gt;

&lt;p&gt;Swift提供下面的基础数据类型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Int&lt;/strong&gt;：整数&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Double&lt;/strong&gt;：十进位数&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt;：true,false&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;String&lt;/strong&gt;：string (letters and words)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;constants&quot;&gt;常量 （Constants）&lt;/h2&gt;

&lt;p&gt;特定类型的变量称为常量，常量是指你只需要决定一次，但是可以使用很多次的特殊变量。&lt;/p&gt;

&lt;p&gt;使用关键字&lt;strong&gt;let&lt;/strong&gt;来声明常量。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;life&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;canTouchThis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;captain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Kirk&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果尝试给常量赋值，会得到编译器错误。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;inferred-typing&quot;&gt;推断类型（Inferred Typing）&lt;/h2&gt;

&lt;p&gt;Swift提供一种新特性称之为&lt;strong&gt;推断类型（Inferred Typing）&lt;/strong&gt;。这意味着如果在定义和初始化变量时&lt;strong&gt;提供足够的信息&lt;/strong&gt;，Swift可以自动预测数据类型，从而不需要每次都输入类型。
在这个特性的支持下，之前的变量声明语法可以变为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;你的变量名称&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;变量初始值&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;你的常量名称&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;常量初始值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意描述推断类型的“&lt;strong&gt;提供足够的信息&lt;/strong&gt;”，如果 “var intNumber=7”没有问题，但是”var doubleNumber=7“则可能达不到你的类型预期，doubleNumber会被默认推断为Int类型，提供足够的信息则需要”var doubleNumber=7.0“。&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>A kid portrait copying painting</title>
   <link href="http://nintymiles.github.io/2016/04/23/kid-portrait-copying-painting/"/>
   <updated>2016-04-23T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/23/kid-portrait-copying-painting</id>
   <content type="html">&lt;h5 id=&quot;willies-kid-portrait-copying-painting-in-class&quot;&gt;Willie’s kid portrait copying painting in class&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/kid_portrait_copying_painting.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>美图</title>
   <link href="http://nintymiles.github.io/2016/04/21/ancient-drawing/"/>
   <updated>2016-04-21T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/21/ancient-drawing</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;美图偶拾&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;网络时代，一切皆可记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/ancient_drawing/paint2.png&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/ancient_drawing/paint4.png&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/ancient_drawing/paint3.png&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/ancient_drawing/paint1.png&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>旧游照片-贵得（2）</title>
   <link href="http://nintymiles.github.io/2016/04/16/past_tourism_guide_mountains/"/>
   <updated>2016-04-16T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/16/past_tourism_guide_mountains</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;旅程第二段：贵得(2)&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;贵得及周边。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/2-guide_mountains.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Willie's Blue and White Porcelain</title>
   <link href="http://nintymiles.github.io/2016/04/13/willie-blue-and-white-porcelain/"/>
   <updated>2016-04-13T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/13/willie-blue-and-white-porcelain</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;青花瓷&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just records the grown up tracks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/blueandwhiteporcelain.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>This Spring Flowers</title>
   <link href="http://nintymiles.github.io/2016/04/10/spring-flowers/"/>
   <updated>2016-04-10T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/10/spring-flowers</id>
   <content type="html">&lt;h5 id=&quot;so-many-kinds-of-flowers-blossom&quot;&gt;So many kinds of flowers blossom.&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;I was collecting all kinds of flowers this spring,so the below shows are.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;the-flowers-people-wont-see&quot;&gt;The flowers people wont see&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/flowers_invisible_1000.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;peach-blossom&quot;&gt;peach blossom&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/peach_flowers1.jpg&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/springflowers2016/peach_flower2.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;tulip-blossom&quot;&gt;tulip blossom&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/tulip_flowers.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;cherry-apple-blossom&quot;&gt;cherry-apple blossom&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/cherry_apple_flowers.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;so-many-kinds-of-other-flowers&quot;&gt;so many kinds of other flowers&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/asset/springflowers2016/all_kinds_of_flowers.jpg&quot; alt=&quot;image description&quot; /&gt;
&lt;img src=&quot;/asset/springflowers2016/all_kinds_of_flowers2.jpg&quot; alt=&quot;image description&quot; /&gt;
—&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The Ultramans in Willie's painting</title>
   <link href="http://nintymiles.github.io/2016/04/06/ultraman-in-willie-eyes/"/>
   <updated>2016-04-06T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/06/ultraman-in-willie-eyes</id>
   <content type="html">&lt;h5 id=&quot;the-kids-always-have-extraordinary-imagination&quot;&gt;The kids always have extraordinary imagination.&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/ultranman-drawing0406.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>同事去西藏，让我想起了故纸堆中的几千张旧日旅行照片</title>
   <link href="http://nintymiles.github.io/2016/04/04/past_tourism/"/>
   <updated>2016-04-04T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/04/past_tourism</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;重拾一段旅程&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;不是因为西藏，而是山川壮美。不是炫耀，而是自然撼动人心。权力的欲望真的可以永无止境的随意地更改自然的面貌吗？！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;section-1&quot;&gt;旅程第一段：西宁至贵得(1)&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;以苍鹰和雪山开头。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/1-hawk_snowmountain.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;初见大山，已然震撼，尚未离开西宁。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/1-xining_moutains.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;路遇牧民剪羊毛，只是这高原羊有些威严气象。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/1-goat_highlander.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;高原草甸中的点缀。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/xizang/1-flowers_xining.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>踏着车流，一路来到100公里外的一条河</title>
   <link href="http://nintymiles.github.io/2016/04/03/a-river-beyond-100-km/"/>
   <updated>2016-04-03T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/03/a-river-beyond-100-km</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;100公里外的一条河&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;岁清明，桃柳当候，岸草遍矣。踏青于沿河城永定河。
&lt;img src=&quot;/asset/ariver_beyond-100km-1000.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>自我的闭关。</title>
   <link href="http://nintymiles.github.io/2016/04/02/shock-by-deep-thought/"/>
   <updated>2016-04-02T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/02/shock-by-deep-thought</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;深深的寒意&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;被动也好，主动也罢。当这么些已经觉醒自我的人在这个时点统一闭关。这本身就让人不寒而栗。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;section-1&quot;&gt;摘记自一博客&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;我很诧异，李马的爱国情怀可以质疑，李马的智商和能力应该不会太低。况且，当所有豪门都在走路的时候，一些朋友难道就不能怀疑一次自己的智商吗？&lt;/li&gt;
  &lt;li&gt;太扯淡！金融能挽救金融地产，就如同你能提着自己飞翔。老实一点好吗？&lt;/li&gt;
  &lt;li&gt;脱锚已经一年半载，寂静的滑翔中并无堕落的感觉。在厚重的惯性中，领导还在展示各种优美的动作。可惜，没有动力的惯性无法支持结构再平衡。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>影分身术</title>
   <link href="http://nintymiles.github.io/2016/04/02/playing_in_maze_house/"/>
   <updated>2016-04-02T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/02/playing_in_maze_house</id>
   <content type="html">&lt;h5 id=&quot;willie-is-playing-in-the-maze-house&quot;&gt;Willie is playing in the maze house&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;影分身术&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/maze_20160402.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>摘记</title>
   <link href="http://nintymiles.github.io/2016/04/01/reading-notes/"/>
   <updated>2016-04-01T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/01/reading-notes</id>
   <content type="html">&lt;h5 id=&quot;section&quot;&gt;国外评级公司的评级降低会产生的影响：&lt;/h5&gt;
&lt;p&gt;标普在穆迪之后调低了中国评级至AA-，这意味着中国经济同时不被两大评级机构看好，已经融入世界经济的中国市场，如果在面临海外借贷时，将会面临更高成本。同时，希望海外资金进入中国市场，承接高收益的中国债券，成为一件高风险的事情。&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;section-1&quot;&gt;下面一段摘录揭示自我的形成：&lt;/h5&gt;
&lt;p&gt;人从小自他人的语言中构建自我,来自父母、其他家庭成员、学校老师、其他相关的人、团队、组织、国家、宗教。每个人在这些环境中构建内心深处的我，并赋予定义，以此为生。&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>昨日记</title>
   <link href="http://nintymiles.github.io/2016/04/01/everyday-thoughts/"/>
   <updated>2016-04-01T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/01/everyday thoughts</id>
   <content type="html">&lt;h2 id=&quot;willie-said-yesterday&quot;&gt;Willie Said Yesterday：&lt;/h2&gt;
&lt;p&gt;我昨天在小广场看见了一个恐龙头化石！&lt;/p&gt;

&lt;h2 id=&quot;sean-read-something-impressive-yesterday&quot;&gt;Sean read something impressive yesterday：&lt;/h2&gt;
&lt;p&gt;“Where a religion was bound up with the government of an empire, political motives did much to tansform its primitive features.” –Bertrand Russel&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;凡事有果必有因。&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Willie's Painting in Kindergarten</title>
   <link href="http://nintymiles.github.io/2016/04/01/class-painting/"/>
   <updated>2016-04-01T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/04/01/class-painting</id>
   <content type="html">&lt;h5 id=&quot;willie-naming-it&quot;&gt;Willie naming it：&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;《葡萄与蜗牛》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/asset/painting/xuan_painting0401.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>九十里</title>
   <link href="http://nintymiles.github.io/2016/03/31/nintymiles-kickoff/"/>
   <updated>2016-03-31T00:00:00+08:00</updated>
   <id>http://nintymiles.github.io/2016/03/31/nintymiles-kickoff</id>
   <content type="html">&lt;p&gt;万物生长，水木自亲。
&lt;img src=&quot;/asset/springflower_160331.jpg&quot; alt=&quot;image description&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;built-on-jekyll-by-seanren&quot;&gt;Built on Jekyll by SeanRen&lt;/h3&gt;

</content>
 </entry>
 

</feed>
